{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useLazyRef from '@mui/utils/useLazyRef';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { useRtl } from '@mui/system/RtlProvider';\nimport { roundToDecimalPlaces } from '@mui/x-internals/math';\nimport { lruMemoize } from '@mui/x-internals/lruMemoize';\nimport { useStoreEffect } from '@mui/x-internals/store';\nimport { useVirtualizer, Dimensions } from '@mui/x-virtualizer';\nimport { useFirstRender } from \"../utils/useFirstRender.js\";\nimport { createSelector } from \"../../utils/createSelector.js\";\nimport { useGridSelector } from \"../utils/useGridSelector.js\";\nimport { gridHasFillerSelector, gridVerticalScrollbarWidthSelector } from \"../features/dimensions/gridDimensionsSelectors.js\";\nimport { gridDensityFactorSelector } from \"../features/density/index.js\";\nimport { gridVisibleColumnDefinitionsSelector, gridVisiblePinnedColumnDefinitionsSelector, gridColumnPositionsSelector, gridHasColSpanSelector } from \"../features/columns/gridColumnsSelector.js\";\nimport { gridPinnedRowsSelector, gridRowCountSelector } from \"../features/rows/gridRowsSelector.js\";\nimport { useGridVisibleRows } from \"../utils/useGridVisibleRows.js\";\nimport { gridPaginationSelector } from \"../features/pagination/index.js\";\nimport { gridFocusedVirtualCellSelector } from \"../features/virtualization/gridFocusedVirtualCellSelector.js\";\nimport { gridRowSelectionManagerSelector } from \"../features/rowSelection/index.js\";\nimport { DATA_GRID_PROPS_DEFAULT_VALUES } from \"../../constants/dataGridPropsDefaultValues.js\";\nimport { getValidRowHeight, minimalContentHeight, rowHeightWarning } from \"../features/rows/gridRowsUtils.js\";\nimport { getTotalHeaderHeight } from \"../features/columns/gridColumnsUtils.js\";\nimport { useGridOverlays } from \"../features/overlays/useGridOverlays.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction identity(x) {\n  return x;\n}\nconst columnsTotalWidthSelector = createSelector(gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector, (visibleColumns, positions) => {\n  const colCount = visibleColumns.length;\n  if (colCount === 0) {\n    return 0;\n  }\n  return roundToDecimalPlaces(positions[colCount - 1] + visibleColumns[colCount - 1].computedWidth, 1);\n});\n\n/** Translates virtualizer state to grid state */\nconst addGridDimensionsCreator = () => lruMemoize((dimensions, headerHeight, groupHeaderHeight, headerFilterHeight, headersTotalHeight) => {\n  return _extends({}, dimensions, {\n    headerHeight,\n    groupHeaderHeight,\n    headerFilterHeight,\n    headersTotalHeight\n  });\n}, {\n  maxSize: 1\n});\n\n/**\n * Virtualizer setup\n */\nexport function useGridVirtualizer(apiRef, rootProps) {\n  const isRtl = useRtl();\n  const {\n    listView\n  } = rootProps;\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const pinnedRows = useGridSelector(apiRef, gridPinnedRowsSelector);\n  const pinnedColumns = gridVisiblePinnedColumnDefinitionsSelector(apiRef);\n  const rowSelectionManager = useGridSelector(apiRef, gridRowSelectionManagerSelector);\n  const isRowSelected = id => rowSelectionManager.has(id) && apiRef.current.isRowSelectable(id);\n  const currentPage = useGridVisibleRows(apiRef);\n  const hasColSpan = useGridSelector(apiRef, gridHasColSpanSelector);\n  const verticalScrollbarWidth = useGridSelector(apiRef, gridVerticalScrollbarWidthSelector);\n  const hasFiller = useGridSelector(apiRef, gridHasFillerSelector);\n  const {\n    autoHeight\n  } = rootProps;\n  const scrollReset = listView;\n\n  // <DIMENSIONS>\n  const density = useGridSelector(apiRef, gridDensityFactorSelector);\n  const baseRowHeight = getValidRowHeight(rootProps.rowHeight, DATA_GRID_PROPS_DEFAULT_VALUES.rowHeight, rowHeightWarning);\n  const rowHeight = Math.floor(baseRowHeight * density);\n  const headerHeight = Math.floor(rootProps.columnHeaderHeight * density);\n  const groupHeaderHeight = Math.floor((rootProps.columnGroupHeaderHeight ?? rootProps.columnHeaderHeight) * density);\n  const headerFilterHeight = Math.floor((rootProps.headerFilterHeight ?? rootProps.columnHeaderHeight) * density);\n  const columnsTotalWidth = useGridSelector(apiRef, columnsTotalWidthSelector);\n  const headersTotalHeight = getTotalHeaderHeight(apiRef, rootProps);\n  const leftPinnedWidth = pinnedColumns.left.reduce((w, col) => w + col.computedWidth, 0);\n  const rightPinnedWidth = pinnedColumns.right.reduce((w, col) => w + col.computedWidth, 0);\n  const overlayState = useGridOverlays(apiRef, rootProps);\n  const dimensionsParams = {\n    rowHeight,\n    headerHeight,\n    columnsTotalWidth,\n    leftPinnedWidth,\n    rightPinnedWidth,\n    topPinnedHeight: headersTotalHeight,\n    bottomPinnedHeight: 0,\n    scrollbarSize: rootProps.scrollbarSize\n  };\n  const addGridDimensions = useLazyRef(addGridDimensionsCreator).current;\n\n  // </DIMENSIONS>\n\n  // <ROWS_META>\n  const dataRowCount = useGridSelector(apiRef, gridRowCountSelector);\n  const pagination = useGridSelector(apiRef, gridPaginationSelector);\n  const rowCount = Math.min(pagination.enabled ? pagination.paginationModel.pageSize : dataRowCount, dataRowCount);\n  const {\n    getRowHeight,\n    getEstimatedRowHeight,\n    getRowSpacing\n  } = rootProps;\n  // </ROWS_META>\n\n  const focusedVirtualCell = useGridSelector(apiRef, gridFocusedVirtualCellSelector);\n  const virtualizer = useVirtualizer({\n    refs: {\n      container: apiRef.current.mainElementRef,\n      scroller: apiRef.current.virtualScrollerRef,\n      scrollbarVertical: apiRef.current.virtualScrollbarVerticalRef,\n      scrollbarHorizontal: apiRef.current.virtualScrollbarHorizontalRef\n    },\n    dimensions: dimensionsParams,\n    virtualization: {\n      isRtl,\n      rowBufferPx: rootProps.rowBufferPx,\n      columnBufferPx: rootProps.columnBufferPx\n    },\n    colspan: {\n      enabled: hasColSpan,\n      getColspan: (rowId, column) => {\n        if (typeof column.colSpan === 'function') {\n          const row = apiRef.current.getRow(rowId);\n          const value = apiRef.current.getRowValue(row, column);\n          return column.colSpan(value, row, column, apiRef) ?? 0;\n        }\n        return column.colSpan ?? 1;\n      }\n    },\n    initialState: {\n      scroll: rootProps.initialState?.scroll,\n      rowSpanning: apiRef.current.state.rowSpanning,\n      virtualization: apiRef.current.state.virtualization\n    },\n    rows: currentPage.rows,\n    range: currentPage.range,\n    rowCount,\n    columns: visibleColumns,\n    pinnedRows,\n    pinnedColumns,\n    autoHeight,\n    disableHorizontalScroll: listView,\n    disableVerticalScroll: overlayState.overlayType === 'noColumnsOverlay' || overlayState.loadingOverlayVariant === 'skeleton',\n    minimalContentHeight,\n    getRowHeight: React.useMemo(() => {\n      if (!getRowHeight) {\n        return undefined;\n      }\n      return rowEntry => getRowHeight(_extends({}, rowEntry, {\n        densityFactor: density\n      }));\n    }, [getRowHeight, density]),\n    getEstimatedRowHeight: React.useMemo(() => getEstimatedRowHeight ? rowEntry => getEstimatedRowHeight(_extends({}, rowEntry, {\n      densityFactor: density\n    })) : undefined, [getEstimatedRowHeight, density]),\n    getRowSpacing: React.useMemo(() => getRowSpacing ? rowEntry => {\n      const indexRelativeToCurrentPage = currentPage.rowIdToIndexMap.get(rowEntry.id) ?? -1;\n      const visibility = {\n        isFirstVisible: indexRelativeToCurrentPage === 0,\n        isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,\n        indexRelativeToCurrentPage\n      };\n      return getRowSpacing(_extends({}, rowEntry, visibility, {\n        indexRelativeToCurrentPage: apiRef.current.getRowIndexRelativeToVisibleRows(rowEntry.id)\n      }));\n    } : undefined, [apiRef, getRowSpacing, currentPage.rows, currentPage.rowIdToIndexMap]),\n    applyRowHeight: useEventCallback((entry, row) => apiRef.current.unstable_applyPipeProcessors('rowHeight', entry, row)),\n    virtualizeColumnsWithAutoRowHeight: rootProps.virtualizeColumnsWithAutoRowHeight,\n    focusedVirtualCell: useEventCallback(() => focusedVirtualCell),\n    resizeThrottleMs: rootProps.resizeThrottleMs,\n    onResize: useEventCallback(size => apiRef.current.publishEvent('resize', size)),\n    onWheel: useEventCallback(event => {\n      apiRef.current.publishEvent('virtualScrollerWheel', {}, event);\n    }),\n    onTouchMove: useEventCallback(event => {\n      apiRef.current.publishEvent('virtualScrollerTouchMove', {}, event);\n    }),\n    onRenderContextChange: useEventCallback(nextRenderContext => {\n      apiRef.current.publishEvent('renderedRowsIntervalChange', nextRenderContext);\n    }),\n    onScrollChange: (scrollPosition, nextRenderContext) => {\n      apiRef.current.publishEvent('scrollPositionChange', {\n        top: scrollPosition.top,\n        left: scrollPosition.left,\n        renderContext: nextRenderContext\n      });\n    },\n    scrollReset,\n    renderRow: params => /*#__PURE__*/_jsx(rootProps.slots.row, _extends({\n      row: params.model,\n      rowId: params.id,\n      index: params.rowIndex,\n      selected: isRowSelected(params.id),\n      offsetLeft: params.offsetLeft,\n      columnsTotalWidth: columnsTotalWidth,\n      rowHeight: params.baseRowHeight,\n      pinnedColumns: pinnedColumns,\n      visibleColumns: visibleColumns,\n      firstColumnIndex: params.firstColumnIndex,\n      lastColumnIndex: params.lastColumnIndex,\n      focusedColumnIndex: params.focusedColumnIndex,\n      isFirstVisible: params.isFirstVisible,\n      isLastVisible: params.isLastVisible,\n      isNotVisible: params.isVirtualFocusRow,\n      showBottomBorder: params.showBottomBorder,\n      scrollbarWidth: verticalScrollbarWidth,\n      gridHasFiller: hasFiller\n    }, rootProps.slotProps?.row), params.id),\n    renderInfiniteLoadingTrigger: id => apiRef.current.getInfiniteLoadingTriggerElement?.({\n      lastRowId: id\n    })\n  });\n\n  // HACK: Keep the grid's store in sync with the virtualizer store. We set up the\n  // subscription in the render phase rather than in an effect because other grid\n  // initialization code runs between those two moments.\n  //\n  // TODO(v9): Remove this\n  useFirstRender(() => {\n    apiRef.current.store.state.dimensions = addGridDimensions(virtualizer.store.state.dimensions, headerHeight, groupHeaderHeight, headerFilterHeight, headersTotalHeight);\n    apiRef.current.store.state.rowsMeta = virtualizer.store.state.rowsMeta;\n    apiRef.current.store.state.virtualization = virtualizer.store.state.virtualization;\n  });\n  useStoreEffect(virtualizer.store, Dimensions.selectors.dimensions, (_, dimensions) => {\n    apiRef.current.setState(gridState => _extends({}, gridState, {\n      dimensions: addGridDimensions(dimensions, headerHeight, groupHeaderHeight, headerFilterHeight, headersTotalHeight)\n    }));\n  });\n  useStoreEffect(virtualizer.store, identity, (_, state) => {\n    if (state.rowsMeta !== apiRef.current.state.rowsMeta) {\n      apiRef.current.setState(gridState => _extends({}, gridState, {\n        rowsMeta: state.rowsMeta\n      }));\n    }\n    if (state.virtualization !== apiRef.current.state.virtualization) {\n      apiRef.current.setState(gridState => _extends({}, gridState, {\n        virtualization: state.virtualization\n      }));\n    }\n  });\n  apiRef.current.register('private', {\n    virtualizer\n  });\n}","map":{"version":3,"names":["_extends","React","useLazyRef","useEventCallback","useRtl","roundToDecimalPlaces","lruMemoize","useStoreEffect","useVirtualizer","Dimensions","useFirstRender","createSelector","useGridSelector","gridHasFillerSelector","gridVerticalScrollbarWidthSelector","gridDensityFactorSelector","gridVisibleColumnDefinitionsSelector","gridVisiblePinnedColumnDefinitionsSelector","gridColumnPositionsSelector","gridHasColSpanSelector","gridPinnedRowsSelector","gridRowCountSelector","useGridVisibleRows","gridPaginationSelector","gridFocusedVirtualCellSelector","gridRowSelectionManagerSelector","DATA_GRID_PROPS_DEFAULT_VALUES","getValidRowHeight","minimalContentHeight","rowHeightWarning","getTotalHeaderHeight","useGridOverlays","jsx","_jsx","identity","x","columnsTotalWidthSelector","visibleColumns","positions","colCount","length","computedWidth","addGridDimensionsCreator","dimensions","headerHeight","groupHeaderHeight","headerFilterHeight","headersTotalHeight","maxSize","useGridVirtualizer","apiRef","rootProps","isRtl","listView","pinnedRows","pinnedColumns","rowSelectionManager","isRowSelected","id","has","current","isRowSelectable","currentPage","hasColSpan","verticalScrollbarWidth","hasFiller","autoHeight","scrollReset","density","baseRowHeight","rowHeight","Math","floor","columnHeaderHeight","columnGroupHeaderHeight","columnsTotalWidth","leftPinnedWidth","left","reduce","w","col","rightPinnedWidth","right","overlayState","dimensionsParams","topPinnedHeight","bottomPinnedHeight","scrollbarSize","addGridDimensions","dataRowCount","pagination","rowCount","min","enabled","paginationModel","pageSize","getRowHeight","getEstimatedRowHeight","getRowSpacing","focusedVirtualCell","virtualizer","refs","container","mainElementRef","scroller","virtualScrollerRef","scrollbarVertical","virtualScrollbarVerticalRef","scrollbarHorizontal","virtualScrollbarHorizontalRef","virtualization","rowBufferPx","columnBufferPx","colspan","getColspan","rowId","column","colSpan","row","getRow","value","getRowValue","initialState","scroll","rowSpanning","state","rows","range","columns","disableHorizontalScroll","disableVerticalScroll","overlayType","loadingOverlayVariant","useMemo","undefined","rowEntry","densityFactor","indexRelativeToCurrentPage","rowIdToIndexMap","get","visibility","isFirstVisible","isLastVisible","getRowIndexRelativeToVisibleRows","applyRowHeight","entry","unstable_applyPipeProcessors","virtualizeColumnsWithAutoRowHeight","resizeThrottleMs","onResize","size","publishEvent","onWheel","event","onTouchMove","onRenderContextChange","nextRenderContext","onScrollChange","scrollPosition","top","renderContext","renderRow","params","slots","model","index","rowIndex","selected","offsetLeft","firstColumnIndex","lastColumnIndex","focusedColumnIndex","isNotVisible","isVirtualFocusRow","showBottomBorder","scrollbarWidth","gridHasFiller","slotProps","renderInfiniteLoadingTrigger","getInfiniteLoadingTriggerElement","lastRowId","store","rowsMeta","selectors","_","setState","gridState","register"],"sources":["C:/Users/USER/PycharmProjects/Company/frontend/node_modules/@mui/x-data-grid/esm/hooks/core/useGridVirtualizer.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useLazyRef from '@mui/utils/useLazyRef';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { useRtl } from '@mui/system/RtlProvider';\nimport { roundToDecimalPlaces } from '@mui/x-internals/math';\nimport { lruMemoize } from '@mui/x-internals/lruMemoize';\nimport { useStoreEffect } from '@mui/x-internals/store';\nimport { useVirtualizer, Dimensions } from '@mui/x-virtualizer';\nimport { useFirstRender } from \"../utils/useFirstRender.js\";\nimport { createSelector } from \"../../utils/createSelector.js\";\nimport { useGridSelector } from \"../utils/useGridSelector.js\";\nimport { gridHasFillerSelector, gridVerticalScrollbarWidthSelector } from \"../features/dimensions/gridDimensionsSelectors.js\";\nimport { gridDensityFactorSelector } from \"../features/density/index.js\";\nimport { gridVisibleColumnDefinitionsSelector, gridVisiblePinnedColumnDefinitionsSelector, gridColumnPositionsSelector, gridHasColSpanSelector } from \"../features/columns/gridColumnsSelector.js\";\nimport { gridPinnedRowsSelector, gridRowCountSelector } from \"../features/rows/gridRowsSelector.js\";\nimport { useGridVisibleRows } from \"../utils/useGridVisibleRows.js\";\nimport { gridPaginationSelector } from \"../features/pagination/index.js\";\nimport { gridFocusedVirtualCellSelector } from \"../features/virtualization/gridFocusedVirtualCellSelector.js\";\nimport { gridRowSelectionManagerSelector } from \"../features/rowSelection/index.js\";\nimport { DATA_GRID_PROPS_DEFAULT_VALUES } from \"../../constants/dataGridPropsDefaultValues.js\";\nimport { getValidRowHeight, minimalContentHeight, rowHeightWarning } from \"../features/rows/gridRowsUtils.js\";\nimport { getTotalHeaderHeight } from \"../features/columns/gridColumnsUtils.js\";\nimport { useGridOverlays } from \"../features/overlays/useGridOverlays.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction identity(x) {\n  return x;\n}\nconst columnsTotalWidthSelector = createSelector(gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector, (visibleColumns, positions) => {\n  const colCount = visibleColumns.length;\n  if (colCount === 0) {\n    return 0;\n  }\n  return roundToDecimalPlaces(positions[colCount - 1] + visibleColumns[colCount - 1].computedWidth, 1);\n});\n\n/** Translates virtualizer state to grid state */\nconst addGridDimensionsCreator = () => lruMemoize((dimensions, headerHeight, groupHeaderHeight, headerFilterHeight, headersTotalHeight) => {\n  return _extends({}, dimensions, {\n    headerHeight,\n    groupHeaderHeight,\n    headerFilterHeight,\n    headersTotalHeight\n  });\n}, {\n  maxSize: 1\n});\n\n/**\n * Virtualizer setup\n */\nexport function useGridVirtualizer(apiRef, rootProps) {\n  const isRtl = useRtl();\n  const {\n    listView\n  } = rootProps;\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const pinnedRows = useGridSelector(apiRef, gridPinnedRowsSelector);\n  const pinnedColumns = gridVisiblePinnedColumnDefinitionsSelector(apiRef);\n  const rowSelectionManager = useGridSelector(apiRef, gridRowSelectionManagerSelector);\n  const isRowSelected = id => rowSelectionManager.has(id) && apiRef.current.isRowSelectable(id);\n  const currentPage = useGridVisibleRows(apiRef);\n  const hasColSpan = useGridSelector(apiRef, gridHasColSpanSelector);\n  const verticalScrollbarWidth = useGridSelector(apiRef, gridVerticalScrollbarWidthSelector);\n  const hasFiller = useGridSelector(apiRef, gridHasFillerSelector);\n  const {\n    autoHeight\n  } = rootProps;\n  const scrollReset = listView;\n\n  // <DIMENSIONS>\n  const density = useGridSelector(apiRef, gridDensityFactorSelector);\n  const baseRowHeight = getValidRowHeight(rootProps.rowHeight, DATA_GRID_PROPS_DEFAULT_VALUES.rowHeight, rowHeightWarning);\n  const rowHeight = Math.floor(baseRowHeight * density);\n  const headerHeight = Math.floor(rootProps.columnHeaderHeight * density);\n  const groupHeaderHeight = Math.floor((rootProps.columnGroupHeaderHeight ?? rootProps.columnHeaderHeight) * density);\n  const headerFilterHeight = Math.floor((rootProps.headerFilterHeight ?? rootProps.columnHeaderHeight) * density);\n  const columnsTotalWidth = useGridSelector(apiRef, columnsTotalWidthSelector);\n  const headersTotalHeight = getTotalHeaderHeight(apiRef, rootProps);\n  const leftPinnedWidth = pinnedColumns.left.reduce((w, col) => w + col.computedWidth, 0);\n  const rightPinnedWidth = pinnedColumns.right.reduce((w, col) => w + col.computedWidth, 0);\n  const overlayState = useGridOverlays(apiRef, rootProps);\n  const dimensionsParams = {\n    rowHeight,\n    headerHeight,\n    columnsTotalWidth,\n    leftPinnedWidth,\n    rightPinnedWidth,\n    topPinnedHeight: headersTotalHeight,\n    bottomPinnedHeight: 0,\n    scrollbarSize: rootProps.scrollbarSize\n  };\n  const addGridDimensions = useLazyRef(addGridDimensionsCreator).current;\n\n  // </DIMENSIONS>\n\n  // <ROWS_META>\n  const dataRowCount = useGridSelector(apiRef, gridRowCountSelector);\n  const pagination = useGridSelector(apiRef, gridPaginationSelector);\n  const rowCount = Math.min(pagination.enabled ? pagination.paginationModel.pageSize : dataRowCount, dataRowCount);\n  const {\n    getRowHeight,\n    getEstimatedRowHeight,\n    getRowSpacing\n  } = rootProps;\n  // </ROWS_META>\n\n  const focusedVirtualCell = useGridSelector(apiRef, gridFocusedVirtualCellSelector);\n  const virtualizer = useVirtualizer({\n    refs: {\n      container: apiRef.current.mainElementRef,\n      scroller: apiRef.current.virtualScrollerRef,\n      scrollbarVertical: apiRef.current.virtualScrollbarVerticalRef,\n      scrollbarHorizontal: apiRef.current.virtualScrollbarHorizontalRef\n    },\n    dimensions: dimensionsParams,\n    virtualization: {\n      isRtl,\n      rowBufferPx: rootProps.rowBufferPx,\n      columnBufferPx: rootProps.columnBufferPx\n    },\n    colspan: {\n      enabled: hasColSpan,\n      getColspan: (rowId, column) => {\n        if (typeof column.colSpan === 'function') {\n          const row = apiRef.current.getRow(rowId);\n          const value = apiRef.current.getRowValue(row, column);\n          return column.colSpan(value, row, column, apiRef) ?? 0;\n        }\n        return column.colSpan ?? 1;\n      }\n    },\n    initialState: {\n      scroll: rootProps.initialState?.scroll,\n      rowSpanning: apiRef.current.state.rowSpanning,\n      virtualization: apiRef.current.state.virtualization\n    },\n    rows: currentPage.rows,\n    range: currentPage.range,\n    rowCount,\n    columns: visibleColumns,\n    pinnedRows,\n    pinnedColumns,\n    autoHeight,\n    disableHorizontalScroll: listView,\n    disableVerticalScroll: overlayState.overlayType === 'noColumnsOverlay' || overlayState.loadingOverlayVariant === 'skeleton',\n    minimalContentHeight,\n    getRowHeight: React.useMemo(() => {\n      if (!getRowHeight) {\n        return undefined;\n      }\n      return rowEntry => getRowHeight(_extends({}, rowEntry, {\n        densityFactor: density\n      }));\n    }, [getRowHeight, density]),\n    getEstimatedRowHeight: React.useMemo(() => getEstimatedRowHeight ? rowEntry => getEstimatedRowHeight(_extends({}, rowEntry, {\n      densityFactor: density\n    })) : undefined, [getEstimatedRowHeight, density]),\n    getRowSpacing: React.useMemo(() => getRowSpacing ? rowEntry => {\n      const indexRelativeToCurrentPage = currentPage.rowIdToIndexMap.get(rowEntry.id) ?? -1;\n      const visibility = {\n        isFirstVisible: indexRelativeToCurrentPage === 0,\n        isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,\n        indexRelativeToCurrentPage\n      };\n      return getRowSpacing(_extends({}, rowEntry, visibility, {\n        indexRelativeToCurrentPage: apiRef.current.getRowIndexRelativeToVisibleRows(rowEntry.id)\n      }));\n    } : undefined, [apiRef, getRowSpacing, currentPage.rows, currentPage.rowIdToIndexMap]),\n    applyRowHeight: useEventCallback((entry, row) => apiRef.current.unstable_applyPipeProcessors('rowHeight', entry, row)),\n    virtualizeColumnsWithAutoRowHeight: rootProps.virtualizeColumnsWithAutoRowHeight,\n    focusedVirtualCell: useEventCallback(() => focusedVirtualCell),\n    resizeThrottleMs: rootProps.resizeThrottleMs,\n    onResize: useEventCallback(size => apiRef.current.publishEvent('resize', size)),\n    onWheel: useEventCallback(event => {\n      apiRef.current.publishEvent('virtualScrollerWheel', {}, event);\n    }),\n    onTouchMove: useEventCallback(event => {\n      apiRef.current.publishEvent('virtualScrollerTouchMove', {}, event);\n    }),\n    onRenderContextChange: useEventCallback(nextRenderContext => {\n      apiRef.current.publishEvent('renderedRowsIntervalChange', nextRenderContext);\n    }),\n    onScrollChange: (scrollPosition, nextRenderContext) => {\n      apiRef.current.publishEvent('scrollPositionChange', {\n        top: scrollPosition.top,\n        left: scrollPosition.left,\n        renderContext: nextRenderContext\n      });\n    },\n    scrollReset,\n    renderRow: params => /*#__PURE__*/_jsx(rootProps.slots.row, _extends({\n      row: params.model,\n      rowId: params.id,\n      index: params.rowIndex,\n      selected: isRowSelected(params.id),\n      offsetLeft: params.offsetLeft,\n      columnsTotalWidth: columnsTotalWidth,\n      rowHeight: params.baseRowHeight,\n      pinnedColumns: pinnedColumns,\n      visibleColumns: visibleColumns,\n      firstColumnIndex: params.firstColumnIndex,\n      lastColumnIndex: params.lastColumnIndex,\n      focusedColumnIndex: params.focusedColumnIndex,\n      isFirstVisible: params.isFirstVisible,\n      isLastVisible: params.isLastVisible,\n      isNotVisible: params.isVirtualFocusRow,\n      showBottomBorder: params.showBottomBorder,\n      scrollbarWidth: verticalScrollbarWidth,\n      gridHasFiller: hasFiller\n    }, rootProps.slotProps?.row), params.id),\n    renderInfiniteLoadingTrigger: id => apiRef.current.getInfiniteLoadingTriggerElement?.({\n      lastRowId: id\n    })\n  });\n\n  // HACK: Keep the grid's store in sync with the virtualizer store. We set up the\n  // subscription in the render phase rather than in an effect because other grid\n  // initialization code runs between those two moments.\n  //\n  // TODO(v9): Remove this\n  useFirstRender(() => {\n    apiRef.current.store.state.dimensions = addGridDimensions(virtualizer.store.state.dimensions, headerHeight, groupHeaderHeight, headerFilterHeight, headersTotalHeight);\n    apiRef.current.store.state.rowsMeta = virtualizer.store.state.rowsMeta;\n    apiRef.current.store.state.virtualization = virtualizer.store.state.virtualization;\n  });\n  useStoreEffect(virtualizer.store, Dimensions.selectors.dimensions, (_, dimensions) => {\n    apiRef.current.setState(gridState => _extends({}, gridState, {\n      dimensions: addGridDimensions(dimensions, headerHeight, groupHeaderHeight, headerFilterHeight, headersTotalHeight)\n    }));\n  });\n  useStoreEffect(virtualizer.store, identity, (_, state) => {\n    if (state.rowsMeta !== apiRef.current.state.rowsMeta) {\n      apiRef.current.setState(gridState => _extends({}, gridState, {\n        rowsMeta: state.rowsMeta\n      }));\n    }\n    if (state.virtualization !== apiRef.current.state.virtualization) {\n      apiRef.current.setState(gridState => _extends({}, gridState, {\n        virtualization: state.virtualization\n      }));\n    }\n  });\n  apiRef.current.register('private', {\n    virtualizer\n  });\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}