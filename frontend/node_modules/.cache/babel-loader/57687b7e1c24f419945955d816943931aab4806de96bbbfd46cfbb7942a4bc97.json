{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport { styled } from '@mui/system';\nimport { useRtl } from '@mui/system/RtlProvider';\nimport { gridDimensionsSelector, gridPinnedColumnsSelector, useGridEvent, useGridSelector } from \"../hooks/index.js\";\nimport { gridPinnedRowsSelector } from \"../hooks/features/rows/gridRowsSelector.js\";\nimport { useGridRootProps } from \"../hooks/utils/useGridRootProps.js\";\nimport { vars } from \"../constants/cssVariables.js\";\nimport { useGridPrivateApiContext } from \"../hooks/utils/useGridPrivateApiContext.js\";\nimport { gridHasScrollXSelector, gridHasScrollYSelector } from \"../hooks/features/dimensions/gridDimensionsSelectors.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst ScrollShadow = styled('div')(({\n  theme\n}) => ({\n  position: 'absolute',\n  inset: 0,\n  pointerEvents: 'none',\n  transition: vars.transition(['box-shadow'], {\n    duration: vars.transitions.duration.short\n  }),\n  '--length': theme.palette.mode === 'dark' ? '8px' : '6px',\n  '--length-inverse': 'calc(var(--length) * -1)',\n  '--opacity': theme.palette.mode === 'dark' ? '0.7' : '0.18',\n  '--blur': 'var(--length)',\n  '--spread': 'calc(var(--length) * -1)',\n  '--color-start': 'rgba(0, 0, 0, calc(var(--hasScrollStart) * var(--opacity)))',\n  '--color-end': 'rgba(0, 0, 0, calc(var(--hasScrollEnd) * var(--opacity)))',\n  variants: [{\n    props: {\n      position: 'vertical'\n    },\n    style: {\n      top: 'var(--DataGrid-topContainerHeight)',\n      bottom: 'calc(var(--DataGrid-bottomContainerHeight) + var(--DataGrid-hasScrollX) * var(--DataGrid-scrollbarSize))',\n      boxShadow: 'inset 0 var(--length) var(--blur) var(--spread) var(--color-start), inset 0 var(--length-inverse) var(--blur) var(--spread) var(--color-end)'\n    }\n  }, {\n    props: {\n      position: 'horizontal'\n    },\n    style: {\n      left: 'var(--DataGrid-leftPinnedWidth)',\n      right: 'calc(var(--DataGrid-rightPinnedWidth) + var(--DataGrid-hasScrollY) * var(--DataGrid-scrollbarSize))',\n      boxShadow: 'inset var(--length) 0 var(--blur) var(--spread) var(--color-start), inset var(--length-inverse) 0 var(--blur) var(--spread) var(--color-end)'\n    }\n  }]\n}));\nfunction GridScrollShadows(props) {\n  const {\n    position\n  } = props;\n  const rootProps = useGridRootProps();\n  const ownerState = {\n    classes: rootProps.classes,\n    position\n  };\n  const ref = React.useRef(null);\n  const apiRef = useGridPrivateApiContext();\n  const hasScrollX = useGridSelector(apiRef, gridHasScrollXSelector);\n  const hasScrollY = useGridSelector(apiRef, gridHasScrollYSelector);\n  const pinnedRows = useGridSelector(apiRef, gridPinnedRowsSelector);\n  const pinnedColumns = useGridSelector(apiRef, gridPinnedColumnsSelector);\n  const initialScrollable = position === 'vertical' ? hasScrollY && pinnedRows?.bottom?.length > 0 : hasScrollX && pinnedColumns?.right?.length !== undefined && pinnedColumns?.right?.length > 0;\n  const isRtl = useRtl();\n  const updateScrollShadowVisibility = React.useCallback(scrollPosition => {\n    if (!ref.current) {\n      return;\n    }\n    // Math.abs to convert negative scroll position (RTL) to positive\n    const scroll = Math.abs(Math.round(scrollPosition));\n    const dimensions = gridDimensionsSelector(apiRef);\n    const maxScroll = Math.round(dimensions.contentSize[position === 'vertical' ? 'height' : 'width'] - dimensions.viewportInnerSize[position === 'vertical' ? 'height' : 'width']);\n    const hasPinnedStart = position === 'vertical' ? pinnedRows?.top?.length > 0 : pinnedColumns?.left?.length !== undefined && pinnedColumns?.left?.length > 0;\n    const hasPinnedEnd = position === 'vertical' ? pinnedRows?.bottom?.length > 0 : pinnedColumns?.right?.length !== undefined && pinnedColumns?.right?.length > 0;\n    const scrollIsNotAtStart = isRtl ? scroll < maxScroll : scroll > 0;\n    const scrollIsNotAtEnd = isRtl ? scroll > 0 : scroll < maxScroll;\n    ref.current.style.setProperty('--hasScrollStart', hasPinnedStart && scrollIsNotAtStart ? '1' : '0');\n    ref.current.style.setProperty('--hasScrollEnd', hasPinnedEnd && scrollIsNotAtEnd ? '1' : '0');\n  }, [pinnedRows, pinnedColumns, isRtl, position, apiRef]);\n  const handleScrolling = scrollParams => {\n    updateScrollShadowVisibility(scrollParams[position === 'vertical' ? 'top' : 'left']);\n  };\n  const handleColumnResizeStop = () => {\n    if (position === 'horizontal') {\n      updateScrollShadowVisibility(apiRef.current.virtualScrollerRef?.current?.scrollLeft || 0);\n    }\n  };\n  useGridEvent(apiRef, 'scrollPositionChange', handleScrolling);\n  useGridEvent(apiRef, 'columnResizeStop', handleColumnResizeStop);\n  React.useEffect(() => {\n    updateScrollShadowVisibility((position === 'horizontal' ? apiRef.current.virtualScrollerRef?.current?.scrollLeft : apiRef.current.virtualScrollerRef?.current?.scrollTop) ?? 0);\n  }, [updateScrollShadowVisibility, apiRef, position]);\n  return /*#__PURE__*/_jsx(ScrollShadow, {\n    ownerState: ownerState,\n    ref: ref,\n    style: {\n      '--hasScrollStart': 0,\n      '--hasScrollEnd': initialScrollable ? '1' : '0'\n    }\n  });\n}\nexport { GridScrollShadows };","map":{"version":3,"names":["React","styled","useRtl","gridDimensionsSelector","gridPinnedColumnsSelector","useGridEvent","useGridSelector","gridPinnedRowsSelector","useGridRootProps","vars","useGridPrivateApiContext","gridHasScrollXSelector","gridHasScrollYSelector","jsx","_jsx","ScrollShadow","theme","position","inset","pointerEvents","transition","duration","transitions","short","palette","mode","variants","props","style","top","bottom","boxShadow","left","right","GridScrollShadows","rootProps","ownerState","classes","ref","useRef","apiRef","hasScrollX","hasScrollY","pinnedRows","pinnedColumns","initialScrollable","length","undefined","isRtl","updateScrollShadowVisibility","useCallback","scrollPosition","current","scroll","Math","abs","round","dimensions","maxScroll","contentSize","viewportInnerSize","hasPinnedStart","hasPinnedEnd","scrollIsNotAtStart","scrollIsNotAtEnd","setProperty","handleScrolling","scrollParams","handleColumnResizeStop","virtualScrollerRef","scrollLeft","useEffect","scrollTop"],"sources":["C:/Users/USER/PycharmProjects/Company/frontend/node_modules/@mui/x-data-grid/esm/components/GridScrollShadows.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { styled } from '@mui/system';\nimport { useRtl } from '@mui/system/RtlProvider';\nimport { gridDimensionsSelector, gridPinnedColumnsSelector, useGridEvent, useGridSelector } from \"../hooks/index.js\";\nimport { gridPinnedRowsSelector } from \"../hooks/features/rows/gridRowsSelector.js\";\nimport { useGridRootProps } from \"../hooks/utils/useGridRootProps.js\";\nimport { vars } from \"../constants/cssVariables.js\";\nimport { useGridPrivateApiContext } from \"../hooks/utils/useGridPrivateApiContext.js\";\nimport { gridHasScrollXSelector, gridHasScrollYSelector } from \"../hooks/features/dimensions/gridDimensionsSelectors.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst ScrollShadow = styled('div')(({\n  theme\n}) => ({\n  position: 'absolute',\n  inset: 0,\n  pointerEvents: 'none',\n  transition: vars.transition(['box-shadow'], {\n    duration: vars.transitions.duration.short\n  }),\n  '--length': theme.palette.mode === 'dark' ? '8px' : '6px',\n  '--length-inverse': 'calc(var(--length) * -1)',\n  '--opacity': theme.palette.mode === 'dark' ? '0.7' : '0.18',\n  '--blur': 'var(--length)',\n  '--spread': 'calc(var(--length) * -1)',\n  '--color-start': 'rgba(0, 0, 0, calc(var(--hasScrollStart) * var(--opacity)))',\n  '--color-end': 'rgba(0, 0, 0, calc(var(--hasScrollEnd) * var(--opacity)))',\n  variants: [{\n    props: {\n      position: 'vertical'\n    },\n    style: {\n      top: 'var(--DataGrid-topContainerHeight)',\n      bottom: 'calc(var(--DataGrid-bottomContainerHeight) + var(--DataGrid-hasScrollX) * var(--DataGrid-scrollbarSize))',\n      boxShadow: 'inset 0 var(--length) var(--blur) var(--spread) var(--color-start), inset 0 var(--length-inverse) var(--blur) var(--spread) var(--color-end)'\n    }\n  }, {\n    props: {\n      position: 'horizontal'\n    },\n    style: {\n      left: 'var(--DataGrid-leftPinnedWidth)',\n      right: 'calc(var(--DataGrid-rightPinnedWidth) + var(--DataGrid-hasScrollY) * var(--DataGrid-scrollbarSize))',\n      boxShadow: 'inset var(--length) 0 var(--blur) var(--spread) var(--color-start), inset var(--length-inverse) 0 var(--blur) var(--spread) var(--color-end)'\n    }\n  }]\n}));\nfunction GridScrollShadows(props) {\n  const {\n    position\n  } = props;\n  const rootProps = useGridRootProps();\n  const ownerState = {\n    classes: rootProps.classes,\n    position\n  };\n  const ref = React.useRef(null);\n  const apiRef = useGridPrivateApiContext();\n  const hasScrollX = useGridSelector(apiRef, gridHasScrollXSelector);\n  const hasScrollY = useGridSelector(apiRef, gridHasScrollYSelector);\n  const pinnedRows = useGridSelector(apiRef, gridPinnedRowsSelector);\n  const pinnedColumns = useGridSelector(apiRef, gridPinnedColumnsSelector);\n  const initialScrollable = position === 'vertical' ? hasScrollY && pinnedRows?.bottom?.length > 0 : hasScrollX && pinnedColumns?.right?.length !== undefined && pinnedColumns?.right?.length > 0;\n  const isRtl = useRtl();\n  const updateScrollShadowVisibility = React.useCallback(scrollPosition => {\n    if (!ref.current) {\n      return;\n    }\n    // Math.abs to convert negative scroll position (RTL) to positive\n    const scroll = Math.abs(Math.round(scrollPosition));\n    const dimensions = gridDimensionsSelector(apiRef);\n    const maxScroll = Math.round(dimensions.contentSize[position === 'vertical' ? 'height' : 'width'] - dimensions.viewportInnerSize[position === 'vertical' ? 'height' : 'width']);\n    const hasPinnedStart = position === 'vertical' ? pinnedRows?.top?.length > 0 : pinnedColumns?.left?.length !== undefined && pinnedColumns?.left?.length > 0;\n    const hasPinnedEnd = position === 'vertical' ? pinnedRows?.bottom?.length > 0 : pinnedColumns?.right?.length !== undefined && pinnedColumns?.right?.length > 0;\n    const scrollIsNotAtStart = isRtl ? scroll < maxScroll : scroll > 0;\n    const scrollIsNotAtEnd = isRtl ? scroll > 0 : scroll < maxScroll;\n    ref.current.style.setProperty('--hasScrollStart', hasPinnedStart && scrollIsNotAtStart ? '1' : '0');\n    ref.current.style.setProperty('--hasScrollEnd', hasPinnedEnd && scrollIsNotAtEnd ? '1' : '0');\n  }, [pinnedRows, pinnedColumns, isRtl, position, apiRef]);\n  const handleScrolling = scrollParams => {\n    updateScrollShadowVisibility(scrollParams[position === 'vertical' ? 'top' : 'left']);\n  };\n  const handleColumnResizeStop = () => {\n    if (position === 'horizontal') {\n      updateScrollShadowVisibility(apiRef.current.virtualScrollerRef?.current?.scrollLeft || 0);\n    }\n  };\n  useGridEvent(apiRef, 'scrollPositionChange', handleScrolling);\n  useGridEvent(apiRef, 'columnResizeStop', handleColumnResizeStop);\n  React.useEffect(() => {\n    updateScrollShadowVisibility((position === 'horizontal' ? apiRef.current.virtualScrollerRef?.current?.scrollLeft : apiRef.current.virtualScrollerRef?.current?.scrollTop) ?? 0);\n  }, [updateScrollShadowVisibility, apiRef, position]);\n  return /*#__PURE__*/_jsx(ScrollShadow, {\n    ownerState: ownerState,\n    ref: ref,\n    style: {\n      '--hasScrollStart': 0,\n      '--hasScrollEnd': initialScrollable ? '1' : '0'\n    }\n  });\n}\nexport { GridScrollShadows };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}