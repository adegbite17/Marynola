{"ast":null,"code":"// src/services/api.js\nimport axios from 'axios';\nconst BASE_URL = 'http://localhost:5000/api';\nclass ApiService {\n  constructor() {\n    this.axios = axios.create({\n      baseURL: BASE_URL,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // Add token to requests\n    this.axios.interceptors.request.use(config => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    });\n  }\n\n  // Auth methods\n  async register(data) {\n    const response = await this.axios.post('/register', data);\n    return response.data;\n  }\n  async login(email, password) {\n    const response = await this.axios.post('/login', {\n      email,\n      password\n    });\n    if (response.data.access_token) {\n      localStorage.setItem('token', response.data.access_token);\n      localStorage.setItem('boss_info', JSON.stringify(response.data.boss_info));\n    }\n    return response.data;\n  }\n  async forgotPassword(email) {\n    const response = await this.axios.post('/forgot-password', {\n      email\n    });\n    return response.data;\n  }\n  async resetPassword(email, code, password) {\n    const response = await this.axios.post('/reset-password', {\n      email,\n      code,\n      password\n    });\n    return response.data;\n  }\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('boss_info');\n  }\n\n  // Staff methods\n  async addStaff(data, file = null) {\n    if (file) {\n      const formData = new FormData();\n      Object.keys(data).forEach(key => {\n        formData.append(key, data[key]);\n      });\n      formData.append('proof_of_id', file);\n      const response = await this.axios.post('/staff', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data;\n    } else {\n      const response = await this.axios.post('/staff', data);\n      return response.data;\n    }\n  }\n  async getAllStaff() {\n    const response = await this.axios.get('/staff');\n    return response.data;\n  }\n  async getStaff(staffId) {\n    const response = await this.axios.get(`/staff/${staffId}`);\n    return response.data;\n  }\n  async updateStaff(staffId, data) {\n    const response = await this.axios.put(`/staff/${staffId}`, data);\n    return response.data;\n  }\n  async updateStaffWithFile(staffId, data, file = null) {\n    const formData = new FormData();\n    Object.keys(data).forEach(key => {\n      formData.append(key, data[key]);\n    });\n    if (file) {\n      formData.append('proof_of_id', file);\n    }\n    const response = await this.axios.put(`/staff/${staffId}/update-with-file`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  }\n  async deleteStaff(staffId) {\n    const response = await this.axios.delete(`/staff/${staffId}`);\n    return response.data;\n  }\n  async uploadStaffId(staffId, file) {\n    const formData = new FormData();\n    formData.append('proof_of_id', file);\n    const response = await this.axios.post(`/staff/${staffId}/upload-id`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  }\n  async downloadProofOfId(staffId) {\n    const response = await this.axios.get(`/staff/${staffId}/download-id`, {\n      responseType: 'blob'\n    });\n    return response.data;\n  }\n  async getDashboard() {\n    const response = await this.axios.get('/dashboard');\n    return response.data;\n  }\n}\nexport default new ApiService();","map":{"version":3,"names":["axios","BASE_URL","ApiService","constructor","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","register","data","response","post","login","email","password","access_token","setItem","JSON","stringify","boss_info","forgotPassword","resetPassword","code","logout","removeItem","addStaff","file","formData","FormData","Object","keys","forEach","key","append","getAllStaff","get","getStaff","staffId","updateStaff","put","updateStaffWithFile","deleteStaff","delete","uploadStaffId","downloadProofOfId","responseType","getDashboard"],"sources":["C:/Users/USER/PycharmProjects/Company/frontend/src/services/api.js"],"sourcesContent":["// src/services/api.js\r\nimport axios from 'axios';\r\n\r\nconst BASE_URL = 'http://localhost:5000/api';\r\n\r\nclass ApiService {\r\n  constructor() {\r\n    this.axios = axios.create({\r\n      baseURL: BASE_URL,\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n    // Add token to requests\r\n    this.axios.interceptors.request.use((config) => {\r\n      const token = localStorage.getItem('token');\r\n      if (token) {\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n      }\r\n      return config;\r\n    });\r\n  }\r\n\r\n  // Auth methods\r\n  async register(data) {\r\n    const response = await this.axios.post('/register', data);\r\n    return response.data;\r\n  }\r\n\r\n  async login(email, password) {\r\n    const response = await this.axios.post('/login', { email, password });\r\n    if (response.data.access_token) {\r\n      localStorage.setItem('token', response.data.access_token);\r\n      localStorage.setItem('boss_info', JSON.stringify(response.data.boss_info));\r\n    }\r\n    return response.data;\r\n  }\r\n\r\n  async forgotPassword(email) {\r\n    const response = await this.axios.post('/forgot-password', { email });\r\n    return response.data;\r\n  }\r\n\r\n  async resetPassword(email, code, password) {\r\n    const response = await this.axios.post('/reset-password', { email, code, password });\r\n    return response.data;\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('boss_info');\r\n  }\r\n\r\n  // Staff methods\r\n  async addStaff(data, file = null) {\r\n    if (file) {\r\n      const formData = new FormData();\r\n      Object.keys(data).forEach(key => {\r\n        formData.append(key, data[key]);\r\n      });\r\n      formData.append('proof_of_id', file);\r\n\r\n      const response = await this.axios.post('/staff', formData, {\r\n        headers: { 'Content-Type': 'multipart/form-data' }\r\n      });\r\n      return response.data;\r\n    } else {\r\n      const response = await this.axios.post('/staff', data);\r\n      return response.data;\r\n    }\r\n  }\r\n\r\n  async getAllStaff() {\r\n    const response = await this.axios.get('/staff');\r\n    return response.data;\r\n  }\r\n\r\n  async getStaff(staffId) {\r\n    const response = await this.axios.get(`/staff/${staffId}`);\r\n    return response.data;\r\n  }\r\n\r\n  async updateStaff(staffId, data) {\r\n    const response = await this.axios.put(`/staff/${staffId}`, data);\r\n    return response.data;\r\n  }\r\n\r\n  async updateStaffWithFile(staffId, data, file = null) {\r\n    const formData = new FormData();\r\n    Object.keys(data).forEach(key => {\r\n      formData.append(key, data[key]);\r\n    });\r\n    if (file) {\r\n      formData.append('proof_of_id', file);\r\n    }\r\n\r\n    const response = await this.axios.put(`/staff/${staffId}/update-with-file`, formData, {\r\n      headers: { 'Content-Type': 'multipart/form-data' }\r\n    });\r\n    return response.data;\r\n  }\r\n\r\n  async deleteStaff(staffId) {\r\n    const response = await this.axios.delete(`/staff/${staffId}`);\r\n    return response.data;\r\n  }\r\n\r\n  async uploadStaffId(staffId, file) {\r\n    const formData = new FormData();\r\n    formData.append('proof_of_id', file);\r\n\r\n    const response = await this.axios.post(`/staff/${staffId}/upload-id`, formData, {\r\n      headers: { 'Content-Type': 'multipart/form-data' }\r\n    });\r\n    return response.data;\r\n  }\r\n\r\n  async downloadProofOfId(staffId) {\r\n    const response = await this.axios.get(`/staff/${staffId}/download-id`, {\r\n      responseType: 'blob'\r\n    });\r\n    return response.data;\r\n  }\r\n\r\n  async getDashboard() {\r\n    const response = await this.axios.get('/dashboard');\r\n    return response.data;\r\n  }\r\n}\r\n\r\nexport default new ApiService();\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,GAAG,2BAA2B;AAE5C,MAAMC,UAAU,CAAC;EACfC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACH,KAAK,GAAGA,KAAK,CAACI,MAAM,CAAC;MACxBC,OAAO,EAAEJ,QAAQ;MACjBK,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;;IAEF;IACA,IAAI,CAACN,KAAK,CAACO,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;MAC9C,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,IAAIF,KAAK,EAAE;QACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;MAClD;MACA,OAAOD,MAAM;IACf,CAAC,CAAC;EACJ;;EAEA;EACA,MAAMK,QAAQA,CAACC,IAAI,EAAE;IACnB,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACjB,KAAK,CAACkB,IAAI,CAAC,WAAW,EAAEF,IAAI,CAAC;IACzD,OAAOC,QAAQ,CAACD,IAAI;EACtB;EAEA,MAAMG,KAAKA,CAACC,KAAK,EAAEC,QAAQ,EAAE;IAC3B,MAAMJ,QAAQ,GAAG,MAAM,IAAI,CAACjB,KAAK,CAACkB,IAAI,CAAC,QAAQ,EAAE;MAAEE,KAAK;MAAEC;IAAS,CAAC,CAAC;IACrE,IAAIJ,QAAQ,CAACD,IAAI,CAACM,YAAY,EAAE;MAC9BV,YAAY,CAACW,OAAO,CAAC,OAAO,EAAEN,QAAQ,CAACD,IAAI,CAACM,YAAY,CAAC;MACzDV,YAAY,CAACW,OAAO,CAAC,WAAW,EAAEC,IAAI,CAACC,SAAS,CAACR,QAAQ,CAACD,IAAI,CAACU,SAAS,CAAC,CAAC;IAC5E;IACA,OAAOT,QAAQ,CAACD,IAAI;EACtB;EAEA,MAAMW,cAAcA,CAACP,KAAK,EAAE;IAC1B,MAAMH,QAAQ,GAAG,MAAM,IAAI,CAACjB,KAAK,CAACkB,IAAI,CAAC,kBAAkB,EAAE;MAAEE;IAAM,CAAC,CAAC;IACrE,OAAOH,QAAQ,CAACD,IAAI;EACtB;EAEA,MAAMY,aAAaA,CAACR,KAAK,EAAES,IAAI,EAAER,QAAQ,EAAE;IACzC,MAAMJ,QAAQ,GAAG,MAAM,IAAI,CAACjB,KAAK,CAACkB,IAAI,CAAC,iBAAiB,EAAE;MAAEE,KAAK;MAAES,IAAI;MAAER;IAAS,CAAC,CAAC;IACpF,OAAOJ,QAAQ,CAACD,IAAI;EACtB;EAEAc,MAAMA,CAAA,EAAG;IACPlB,YAAY,CAACmB,UAAU,CAAC,OAAO,CAAC;IAChCnB,YAAY,CAACmB,UAAU,CAAC,WAAW,CAAC;EACtC;;EAEA;EACA,MAAMC,QAAQA,CAAChB,IAAI,EAAEiB,IAAI,GAAG,IAAI,EAAE;IAChC,IAAIA,IAAI,EAAE;MACR,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BC,MAAM,CAACC,IAAI,CAACrB,IAAI,CAAC,CAACsB,OAAO,CAACC,GAAG,IAAI;QAC/BL,QAAQ,CAACM,MAAM,CAACD,GAAG,EAAEvB,IAAI,CAACuB,GAAG,CAAC,CAAC;MACjC,CAAC,CAAC;MACFL,QAAQ,CAACM,MAAM,CAAC,aAAa,EAAEP,IAAI,CAAC;MAEpC,MAAMhB,QAAQ,GAAG,MAAM,IAAI,CAACjB,KAAK,CAACkB,IAAI,CAAC,QAAQ,EAAEgB,QAAQ,EAAE;QACzD5B,OAAO,EAAE;UAAE,cAAc,EAAE;QAAsB;MACnD,CAAC,CAAC;MACF,OAAOW,QAAQ,CAACD,IAAI;IACtB,CAAC,MAAM;MACL,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACjB,KAAK,CAACkB,IAAI,CAAC,QAAQ,EAAEF,IAAI,CAAC;MACtD,OAAOC,QAAQ,CAACD,IAAI;IACtB;EACF;EAEA,MAAMyB,WAAWA,CAAA,EAAG;IAClB,MAAMxB,QAAQ,GAAG,MAAM,IAAI,CAACjB,KAAK,CAAC0C,GAAG,CAAC,QAAQ,CAAC;IAC/C,OAAOzB,QAAQ,CAACD,IAAI;EACtB;EAEA,MAAM2B,QAAQA,CAACC,OAAO,EAAE;IACtB,MAAM3B,QAAQ,GAAG,MAAM,IAAI,CAACjB,KAAK,CAAC0C,GAAG,CAAC,UAAUE,OAAO,EAAE,CAAC;IAC1D,OAAO3B,QAAQ,CAACD,IAAI;EACtB;EAEA,MAAM6B,WAAWA,CAACD,OAAO,EAAE5B,IAAI,EAAE;IAC/B,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACjB,KAAK,CAAC8C,GAAG,CAAC,UAAUF,OAAO,EAAE,EAAE5B,IAAI,CAAC;IAChE,OAAOC,QAAQ,CAACD,IAAI;EACtB;EAEA,MAAM+B,mBAAmBA,CAACH,OAAO,EAAE5B,IAAI,EAAEiB,IAAI,GAAG,IAAI,EAAE;IACpD,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BC,MAAM,CAACC,IAAI,CAACrB,IAAI,CAAC,CAACsB,OAAO,CAACC,GAAG,IAAI;MAC/BL,QAAQ,CAACM,MAAM,CAACD,GAAG,EAAEvB,IAAI,CAACuB,GAAG,CAAC,CAAC;IACjC,CAAC,CAAC;IACF,IAAIN,IAAI,EAAE;MACRC,QAAQ,CAACM,MAAM,CAAC,aAAa,EAAEP,IAAI,CAAC;IACtC;IAEA,MAAMhB,QAAQ,GAAG,MAAM,IAAI,CAACjB,KAAK,CAAC8C,GAAG,CAAC,UAAUF,OAAO,mBAAmB,EAAEV,QAAQ,EAAE;MACpF5B,OAAO,EAAE;QAAE,cAAc,EAAE;MAAsB;IACnD,CAAC,CAAC;IACF,OAAOW,QAAQ,CAACD,IAAI;EACtB;EAEA,MAAMgC,WAAWA,CAACJ,OAAO,EAAE;IACzB,MAAM3B,QAAQ,GAAG,MAAM,IAAI,CAACjB,KAAK,CAACiD,MAAM,CAAC,UAAUL,OAAO,EAAE,CAAC;IAC7D,OAAO3B,QAAQ,CAACD,IAAI;EACtB;EAEA,MAAMkC,aAAaA,CAACN,OAAO,EAAEX,IAAI,EAAE;IACjC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACM,MAAM,CAAC,aAAa,EAAEP,IAAI,CAAC;IAEpC,MAAMhB,QAAQ,GAAG,MAAM,IAAI,CAACjB,KAAK,CAACkB,IAAI,CAAC,UAAU0B,OAAO,YAAY,EAAEV,QAAQ,EAAE;MAC9E5B,OAAO,EAAE;QAAE,cAAc,EAAE;MAAsB;IACnD,CAAC,CAAC;IACF,OAAOW,QAAQ,CAACD,IAAI;EACtB;EAEA,MAAMmC,iBAAiBA,CAACP,OAAO,EAAE;IAC/B,MAAM3B,QAAQ,GAAG,MAAM,IAAI,CAACjB,KAAK,CAAC0C,GAAG,CAAC,UAAUE,OAAO,cAAc,EAAE;MACrEQ,YAAY,EAAE;IAChB,CAAC,CAAC;IACF,OAAOnC,QAAQ,CAACD,IAAI;EACtB;EAEA,MAAMqC,YAAYA,CAAA,EAAG;IACnB,MAAMpC,QAAQ,GAAG,MAAM,IAAI,CAACjB,KAAK,CAAC0C,GAAG,CAAC,YAAY,CAAC;IACnD,OAAOzB,QAAQ,CAACD,IAAI;EACtB;AACF;AAEA,eAAe,IAAId,UAAU,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}