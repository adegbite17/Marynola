{"ast":null,"code":"const API_BASE_URL = 'http://localhost:5000';\nclass ApiService {\n  static async request(endpoint, options = {}) {\n    const url = `${API_BASE_URL}${endpoint}`;\n    const config = {\n      ...options\n    };\n\n    // Add auth token if available\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers = {\n        ...config.headers,\n        'Authorization': `Bearer ${token}`\n      };\n    }\n\n    // Only add Content-Type for non-FormData requests\n    if (!(options.body instanceof FormData)) {\n      config.headers = {\n        'Content-Type': 'application/json',\n        ...config.headers\n      };\n    }\n    try {\n      const response = await fetch(url, config);\n      if (!response.ok) {\n        let errorMessage;\n        try {\n          const errorData = await response.json();\n          console.error('API Error Response:', errorData);\n          errorMessage = errorData.message || errorData.error || `HTTP ${response.status}`;\n        } catch {\n          errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n        }\n\n        // Handle 401 differently for login vs authenticated routes\n        if (response.status === 401) {\n          // Don't treat login failures as session expiration\n          if (endpoint === '/api/login') {\n            throw new Error(errorMessage);\n          } else {\n            // Only clear tokens for authenticated routes\n            localStorage.removeItem('token');\n            localStorage.removeItem('user');\n            throw new Error('Session expired. Please login again.');\n          }\n        }\n        throw new Error(errorMessage);\n      }\n      const data = await response.json();\n      console.log(`API Response for ${endpoint}:`, data);\n      return data;\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n  static async getStaffList() {\n    try {\n      const response = await this.request('/api/staff');\n\n      // Handle various response formats\n      if (Array.isArray(response)) {\n        return response;\n      } else if (response && Array.isArray(response.data)) {\n        return response.data;\n      } else if (response && Array.isArray(response.staff)) {\n        return response.staff;\n      } else if (response && Array.isArray(response.staffList)) {\n        return response.staffList;\n      } else {\n        console.warn('Unexpected staff list response format:', response);\n        return [];\n      }\n    } catch (error) {\n      console.error('Error fetching staff list:', error);\n      return [];\n    }\n  }\n  static async register(userData) {\n    return this.request('/api/register', {\n      method: 'POST',\n      body: JSON.stringify(userData)\n    });\n  }\n  static async login(credentials) {\n    return this.request('/api/login', {\n      method: 'POST',\n      body: JSON.stringify(credentials)\n    });\n  }\n  static async logout() {\n    try {\n      await this.request('/api/logout', {\n        method: 'POST'\n      });\n    } finally {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n    }\n  }\n  static async forgotPassword(data) {\n    const response = await fetch(`${API_BASE_URL}/api/forgot-password`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n    }\n    return response.json();\n  }\n  static async resetPassword(data) {\n    const response = await fetch(`${API_BASE_URL}/api/reset-password`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n    }\n    return response.json();\n  }\n  static async getStaff(id) {\n    return this.request(`/api/staff/${id}`);\n  }\n  static async addStaff(staffData, isFormData = false) {\n    const options = {\n      method: 'POST'\n    };\n    if (isFormData) {\n      options.body = staffData;\n    } else {\n      options.headers = {\n        'Content-Type': 'application/json'\n      };\n      options.body = JSON.stringify(staffData);\n    }\n    return this.request('/api/staff', options);\n  }\n  static async addStaffWithFile(staffData) {\n    const formData = new FormData();\n    Object.keys(staffData).forEach(key => {\n      if (staffData[key] !== null && staffData[key] !== undefined) {\n        formData.append(key, staffData[key]);\n      }\n    });\n    return this.request('/api/staff', {\n      method: 'POST',\n      body: formData\n    });\n  }\n  static async updateStaff(id, staffData) {\n    const options = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(staffData)\n    };\n    return this.request(`/api/staff/${id}`, options);\n  }\n  static async updateStaffWithFile(id, formData) {\n    console.log('Updating staff with ID:', id);\n    for (let pair of formData.entries()) {\n      console.log('FormData entry:', pair[0], pair[1]);\n    }\n    const options = {\n      method: 'PUT',\n      body: formData\n    };\n    return this.request(`/api/staff/${id}/update-with-file`, options);\n  }\n  static async getDashboard() {\n    try {\n      const response = await this.request('/api/dashboard');\n      let staffList = [];\n      if (Array.isArray(response.staffList)) {\n        staffList = response.staffList;\n      } else if (Array.isArray(response.staff)) {\n        staffList = response.staff;\n      } else if (Array.isArray(response.data)) {\n        staffList = response.data;\n      } else if (Array.isArray(response)) {\n        staffList = response;\n      }\n      return {\n        totalStaff: response.totalStaff || response.total_staff || staffList.length || 0,\n        staffList: staffList,\n        ...response\n      };\n    } catch (error) {\n      console.error('Error fetching dashboard:', error);\n      return {\n        totalStaff: 0,\n        staffList: []\n      };\n    }\n  }\n  static async downloadStaffId(id) {\n    const response = await fetch(`${API_BASE_URL}/api/staff/${id}/download-id`, {\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to download ID');\n    }\n    return response.blob();\n  }\n  static async deleteStaff(id) {\n    const options = {\n      method: 'DELETE',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\n      }\n    };\n    return this.request(`/api/staff/${id}`, options);\n  }\n\n  // NEW SEARCH AND DOWNLOAD METHODS - PROPERLY FORMATTED\n  static async searchStaff(query, employmentStatus = '') {\n    const params = new URLSearchParams();\n    if (query) params.append('q', query);\n    if (employmentStatus) params.append('employment_status', employmentStatus);\n    const response = await fetch(`${API_BASE_URL}/api/staff/search?${params}`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return response.json();\n  }\n  static async downloadStaffExcel() {\n    const response = await fetch(`${API_BASE_URL}/api/staff/download`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const blob = await response.blob();\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'staff_list.xlsx';\n    document.body.appendChild(a);\n    a.click();\n    window.URL.revokeObjectURL(url);\n    document.body.removeChild(a);\n  }\n  static async getUserProfile() {\n    return this.request('/api/profile');\n  }\n  static async updateProfile(profileData) {\n    return this.request('/api/profile', {\n      method: 'PUT',\n      body: JSON.stringify(profileData)\n    });\n  }\n}\nexport default ApiService;","map":{"version":3,"names":["API_BASE_URL","ApiService","request","endpoint","options","url","config","token","localStorage","getItem","headers","body","FormData","response","fetch","ok","errorMessage","errorData","json","console","error","message","status","statusText","Error","removeItem","data","log","getStaffList","Array","isArray","staff","staffList","warn","register","userData","method","JSON","stringify","login","credentials","logout","forgotPassword","catch","resetPassword","getStaff","id","addStaff","staffData","isFormData","addStaffWithFile","formData","Object","keys","forEach","key","undefined","append","updateStaff","updateStaffWithFile","pair","entries","getDashboard","totalStaff","total_staff","length","downloadStaffId","blob","deleteStaff","searchStaff","query","employmentStatus","params","URLSearchParams","downloadStaffExcel","window","URL","createObjectURL","a","document","createElement","href","download","appendChild","click","revokeObjectURL","removeChild","getUserProfile","updateProfile","profileData"],"sources":["C:/Users/USER/PycharmProjects/Company/frontend/src/services/api.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:5000';\r\n\r\nclass ApiService {\r\n    static async request(endpoint, options = {}) {\r\n        const url = `${API_BASE_URL}${endpoint}`;\r\n        const config = {\r\n            ...options,\r\n        };\r\n\r\n        // Add auth token if available\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n            config.headers = {\r\n                ...config.headers,\r\n                'Authorization': `Bearer ${token}`,\r\n            };\r\n        }\r\n\r\n        // Only add Content-Type for non-FormData requests\r\n        if (!(options.body instanceof FormData)) {\r\n            config.headers = {\r\n                'Content-Type': 'application/json',\r\n                ...config.headers,\r\n            };\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(url, config);\r\n\r\n            if (!response.ok) {\r\n                let errorMessage;\r\n                try {\r\n                    const errorData = await response.json();\r\n                    console.error('API Error Response:', errorData);\r\n                    errorMessage = errorData.message || errorData.error || `HTTP ${response.status}`;\r\n                } catch {\r\n                    errorMessage = `HTTP ${response.status}: ${response.statusText}`;\r\n                }\r\n\r\n                // Handle 401 differently for login vs authenticated routes\r\n                if (response.status === 401) {\r\n                    // Don't treat login failures as session expiration\r\n                    if (endpoint === '/api/login') {\r\n                        throw new Error(errorMessage);\r\n                    } else {\r\n                        // Only clear tokens for authenticated routes\r\n                        localStorage.removeItem('token');\r\n                        localStorage.removeItem('user');\r\n                        throw new Error('Session expired. Please login again.');\r\n                    }\r\n                }\r\n\r\n                throw new Error(errorMessage);\r\n            }\r\n\r\n            const data = await response.json();\r\n            console.log(`API Response for ${endpoint}:`, data);\r\n            return data;\r\n\r\n        } catch (error) {\r\n            console.error('API Error:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n\r\n    static async getStaffList() {\r\n        try {\r\n            const response = await this.request('/api/staff');\r\n\r\n            // Handle various response formats\r\n            if (Array.isArray(response)) {\r\n                return response;\r\n            } else if (response && Array.isArray(response.data)) {\r\n                return response.data;\r\n            } else if (response && Array.isArray(response.staff)) {\r\n                return response.staff;\r\n            } else if (response && Array.isArray(response.staffList)) {\r\n                return response.staffList;\r\n            } else {\r\n                console.warn('Unexpected staff list response format:', response);\r\n                return [];\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching staff list:', error);\r\n            return [];\r\n        }\r\n    }\r\n\r\n    static async register(userData) {\r\n        return this.request('/api/register', {\r\n            method: 'POST',\r\n            body: JSON.stringify(userData),\r\n        });\r\n    }\r\n\r\n    static async login(credentials) {\r\n        return this.request('/api/login', {\r\n            method: 'POST',\r\n            body: JSON.stringify(credentials),\r\n        });\r\n    }\r\n\r\n    static async logout() {\r\n        try {\r\n            await this.request('/api/logout', {\r\n                method: 'POST',\r\n            });\r\n        } finally {\r\n            localStorage.removeItem('token');\r\n            localStorage.removeItem('user');\r\n        }\r\n    }\r\n\r\n    static async forgotPassword(data) {\r\n        const response = await fetch(`${API_BASE_URL}/api/forgot-password`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const errorData = await response.json().catch(() => ({}));\r\n            throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        return response.json();\r\n    }\r\n\r\n    static async resetPassword(data) {\r\n        const response = await fetch(`${API_BASE_URL}/api/reset-password`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const errorData = await response.json().catch(() => ({}));\r\n            throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        return response.json();\r\n    }\r\n\r\n    static async getStaff(id) {\r\n        return this.request(`/api/staff/${id}`);\r\n    }\r\n\r\n    static async addStaff(staffData, isFormData = false) {\r\n        const options = {\r\n            method: 'POST',\r\n        };\r\n\r\n        if (isFormData) {\r\n            options.body = staffData;\r\n        } else {\r\n            options.headers = {\r\n                'Content-Type': 'application/json',\r\n            };\r\n            options.body = JSON.stringify(staffData);\r\n        }\r\n\r\n        return this.request('/api/staff', options);\r\n    }\r\n\r\n    static async addStaffWithFile(staffData) {\r\n        const formData = new FormData();\r\n\r\n        Object.keys(staffData).forEach(key => {\r\n            if (staffData[key] !== null && staffData[key] !== undefined) {\r\n                formData.append(key, staffData[key]);\r\n            }\r\n        });\r\n\r\n        return this.request('/api/staff', {\r\n            method: 'POST',\r\n            body: formData,\r\n        });\r\n    }\r\n\r\n    static async updateStaff(id, staffData) {\r\n        const options = {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(staffData)\r\n        };\r\n\r\n        return this.request(`/api/staff/${id}`, options);\r\n    }\r\n\r\n    static async updateStaffWithFile(id, formData) {\r\n        console.log('Updating staff with ID:', id);\r\n        for (let pair of formData.entries()) {\r\n            console.log('FormData entry:', pair[0], pair[1]);\r\n        }\r\n\r\n        const options = {\r\n            method: 'PUT',\r\n            body: formData\r\n        };\r\n\r\n        return this.request(`/api/staff/${id}/update-with-file`, options);\r\n    }\r\n\r\n    static async getDashboard() {\r\n        try {\r\n            const response = await this.request('/api/dashboard');\r\n\r\n            let staffList = [];\r\n            if (Array.isArray(response.staffList)) {\r\n                staffList = response.staffList;\r\n            } else if (Array.isArray(response.staff)) {\r\n                staffList = response.staff;\r\n            } else if (Array.isArray(response.data)) {\r\n                staffList = response.data;\r\n            } else if (Array.isArray(response)) {\r\n                staffList = response;\r\n            }\r\n\r\n            return {\r\n                totalStaff: response.totalStaff || response.total_staff || staffList.length || 0,\r\n                staffList: staffList,\r\n                ...response\r\n            };\r\n        } catch (error) {\r\n            console.error('Error fetching dashboard:', error);\r\n            return {totalStaff: 0, staffList: []};\r\n        }\r\n    }\r\n\r\n    static async downloadStaffId(id) {\r\n        const response = await fetch(`${API_BASE_URL}/api/staff/${id}/download-id`, {\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n            }\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error('Failed to download ID');\r\n        }\r\n\r\n        return response.blob();\r\n    }\r\n\r\n    static async deleteStaff(id) {\r\n        const options = {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n            }\r\n        };\r\n\r\n        return this.request(`/api/staff/${id}`, options);\r\n    }\r\n\r\n    // NEW SEARCH AND DOWNLOAD METHODS - PROPERLY FORMATTED\r\n    static async searchStaff(query, employmentStatus = '') {\r\n        const params = new URLSearchParams();\r\n        if (query) params.append('q', query);\r\n        if (employmentStatus) params.append('employment_status', employmentStatus);\r\n\r\n        const response = await fetch(`${API_BASE_URL}/api/staff/search?${params}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('token')}`,\r\n                'Content-Type': 'application/json',\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        return response.json();\r\n    }\r\n\r\n    static async downloadStaffExcel() {\r\n        const response = await fetch(`${API_BASE_URL}/api/staff/download`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('token')}`,\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        const blob = await response.blob();\r\n        const url = window.URL.createObjectURL(blob);\r\n        const a = document.createElement('a');\r\n        a.href = url;\r\n        a.download = 'staff_list.xlsx';\r\n        document.body.appendChild(a);\r\n        a.click();\r\n        window.URL.revokeObjectURL(url);\r\n        document.body.removeChild(a);\r\n    }\r\n\r\n    static async getUserProfile() {\r\n        return this.request('/api/profile');\r\n    }\r\n\r\n    static async updateProfile(profileData) {\r\n        return this.request('/api/profile', {\r\n            method: 'PUT',\r\n            body: JSON.stringify(profileData),\r\n        });\r\n    }\r\n}\r\n\r\nexport default ApiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}