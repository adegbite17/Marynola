{"ast":null,"code":"import * as React from 'react';\nimport { getGridCellElement, getGridColumnHeaderElement, getGridRowElement } from \"../../../utils/domUtils.js\";\nimport { useGridApiMethod } from \"../../utils/useGridApiMethod.js\";\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from \"../focus/gridFocusStateSelector.js\";\nimport { gridListColumnSelector } from \"../listView/gridListViewSelectors.js\";\nimport { gridRowNodeSelector } from \"./gridRowsSelector.js\";\nexport class MissingRowIdError extends Error {}\n\n/**\n * @requires useGridColumns (method)\n * @requires useGridRows (method)\n * @requires useGridFocus (state)\n * @requires useGridEditing (method)\n * TODO: Impossible priority - useGridEditing also needs to be after useGridParamsApi\n * TODO: Impossible priority - useGridFocus also needs to be after useGridParamsApi\n */\nexport function useGridParamsApi(apiRef, props, configuration) {\n  const getColumnHeaderParams = React.useCallback(field => ({\n    field,\n    colDef: apiRef.current.getColumn(field)\n  }), [apiRef]);\n  const getRowParams = React.useCallback(id => {\n    const row = apiRef.current.getRow(id);\n    if (!row) {\n      throw new MissingRowIdError(`No row with id #${id} found`);\n    }\n    const params = {\n      id,\n      columns: apiRef.current.getAllColumns(),\n      row\n    };\n    return params;\n  }, [apiRef]);\n  const getCellParamsForRow = React.useCallback((id, field, row, {\n    cellMode,\n    colDef,\n    hasFocus,\n    rowNode,\n    tabIndex,\n    value: forcedValue,\n    formattedValue: forcedFormattedValue\n  }) => {\n    let value = row[field];\n    if (forcedValue !== undefined) {\n      value = forcedValue;\n    } else if (colDef?.valueGetter) {\n      value = colDef.valueGetter(value, row, colDef, apiRef);\n    }\n    let formattedValue = value;\n    if (forcedFormattedValue !== undefined) {\n      formattedValue = forcedFormattedValue;\n    } else if (colDef?.valueFormatter) {\n      formattedValue = colDef.valueFormatter(value, row, colDef, apiRef);\n    }\n    const params = {\n      id,\n      field,\n      row,\n      rowNode,\n      colDef,\n      cellMode,\n      hasFocus,\n      tabIndex,\n      value,\n      formattedValue,\n      isEditable: false,\n      api: apiRef.current\n    };\n    params.isEditable = colDef && apiRef.current.isCellEditable(params);\n    return params;\n  }, [apiRef]);\n  const getCellParams = React.useCallback((id, field) => {\n    const row = apiRef.current.getRow(id);\n    const rowNode = gridRowNodeSelector(apiRef, id);\n    if (!row || !rowNode) {\n      throw new MissingRowIdError(`No row with id #${id} found`);\n    }\n    const cellFocus = gridFocusCellSelector(apiRef);\n    const cellTabIndex = gridTabIndexCellSelector(apiRef);\n    const cellMode = apiRef.current.getCellMode(id, field);\n    return apiRef.current.getCellParamsForRow(id, field, row, {\n      colDef: props.listView && props.listViewColumn?.field === field ? gridListColumnSelector(apiRef) : apiRef.current.getColumn(field),\n      rowNode,\n      hasFocus: cellFocus !== null && cellFocus.field === field && cellFocus.id === id,\n      tabIndex: cellTabIndex && cellTabIndex.field === field && cellTabIndex.id === id ? 0 : -1,\n      cellMode\n    });\n  }, [apiRef, props.listView, props.listViewColumn?.field]);\n  const getColumnHeaderElement = React.useCallback(field => {\n    if (!apiRef.current.rootElementRef.current) {\n      return null;\n    }\n    return getGridColumnHeaderElement(apiRef.current.rootElementRef.current, field);\n  }, [apiRef]);\n  const getRowElement = React.useCallback(id => {\n    if (!apiRef.current.rootElementRef.current) {\n      return null;\n    }\n    return getGridRowElement(apiRef.current.rootElementRef.current, id);\n  }, [apiRef]);\n  const getCellElement = React.useCallback((id, field) => {\n    if (!apiRef.current.rootElementRef.current) {\n      return null;\n    }\n    return getGridCellElement(apiRef.current.rootElementRef.current, {\n      id,\n      field\n    });\n  }, [apiRef]);\n  const overridableParamsMethods = configuration.hooks.useGridParamsOverridableMethods(apiRef);\n  const paramsApi = {\n    getCellValue: overridableParamsMethods.getCellValue,\n    getCellParams,\n    getCellElement,\n    getRowValue: overridableParamsMethods.getRowValue,\n    getRowFormattedValue: overridableParamsMethods.getRowFormattedValue,\n    getRowParams,\n    getRowElement,\n    getColumnHeaderParams,\n    getColumnHeaderElement\n  };\n  const paramsPrivateApi = {\n    getCellParamsForRow\n  };\n  useGridApiMethod(apiRef, paramsApi, 'public');\n  useGridApiMethod(apiRef, paramsPrivateApi, 'private');\n}","map":{"version":3,"names":["React","getGridCellElement","getGridColumnHeaderElement","getGridRowElement","useGridApiMethod","gridFocusCellSelector","gridTabIndexCellSelector","gridListColumnSelector","gridRowNodeSelector","MissingRowIdError","Error","useGridParamsApi","apiRef","props","configuration","getColumnHeaderParams","useCallback","field","colDef","current","getColumn","getRowParams","id","row","getRow","params","columns","getAllColumns","getCellParamsForRow","cellMode","hasFocus","rowNode","tabIndex","value","forcedValue","formattedValue","forcedFormattedValue","undefined","valueGetter","valueFormatter","isEditable","api","isCellEditable","getCellParams","cellFocus","cellTabIndex","getCellMode","listView","listViewColumn","getColumnHeaderElement","rootElementRef","getRowElement","getCellElement","overridableParamsMethods","hooks","useGridParamsOverridableMethods","paramsApi","getCellValue","getRowValue","getRowFormattedValue","paramsPrivateApi"],"sources":["C:/Users/USER/PycharmProjects/Company/frontend/node_modules/@mui/x-data-grid/esm/hooks/features/rows/useGridParamsApi.js"],"sourcesContent":["import * as React from 'react';\nimport { getGridCellElement, getGridColumnHeaderElement, getGridRowElement } from \"../../../utils/domUtils.js\";\nimport { useGridApiMethod } from \"../../utils/useGridApiMethod.js\";\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from \"../focus/gridFocusStateSelector.js\";\nimport { gridListColumnSelector } from \"../listView/gridListViewSelectors.js\";\nimport { gridRowNodeSelector } from \"./gridRowsSelector.js\";\nexport class MissingRowIdError extends Error {}\n\n/**\n * @requires useGridColumns (method)\n * @requires useGridRows (method)\n * @requires useGridFocus (state)\n * @requires useGridEditing (method)\n * TODO: Impossible priority - useGridEditing also needs to be after useGridParamsApi\n * TODO: Impossible priority - useGridFocus also needs to be after useGridParamsApi\n */\nexport function useGridParamsApi(apiRef, props, configuration) {\n  const getColumnHeaderParams = React.useCallback(field => ({\n    field,\n    colDef: apiRef.current.getColumn(field)\n  }), [apiRef]);\n  const getRowParams = React.useCallback(id => {\n    const row = apiRef.current.getRow(id);\n    if (!row) {\n      throw new MissingRowIdError(`No row with id #${id} found`);\n    }\n    const params = {\n      id,\n      columns: apiRef.current.getAllColumns(),\n      row\n    };\n    return params;\n  }, [apiRef]);\n  const getCellParamsForRow = React.useCallback((id, field, row, {\n    cellMode,\n    colDef,\n    hasFocus,\n    rowNode,\n    tabIndex,\n    value: forcedValue,\n    formattedValue: forcedFormattedValue\n  }) => {\n    let value = row[field];\n    if (forcedValue !== undefined) {\n      value = forcedValue;\n    } else if (colDef?.valueGetter) {\n      value = colDef.valueGetter(value, row, colDef, apiRef);\n    }\n    let formattedValue = value;\n    if (forcedFormattedValue !== undefined) {\n      formattedValue = forcedFormattedValue;\n    } else if (colDef?.valueFormatter) {\n      formattedValue = colDef.valueFormatter(value, row, colDef, apiRef);\n    }\n    const params = {\n      id,\n      field,\n      row,\n      rowNode,\n      colDef,\n      cellMode,\n      hasFocus,\n      tabIndex,\n      value,\n      formattedValue,\n      isEditable: false,\n      api: apiRef.current\n    };\n    params.isEditable = colDef && apiRef.current.isCellEditable(params);\n    return params;\n  }, [apiRef]);\n  const getCellParams = React.useCallback((id, field) => {\n    const row = apiRef.current.getRow(id);\n    const rowNode = gridRowNodeSelector(apiRef, id);\n    if (!row || !rowNode) {\n      throw new MissingRowIdError(`No row with id #${id} found`);\n    }\n    const cellFocus = gridFocusCellSelector(apiRef);\n    const cellTabIndex = gridTabIndexCellSelector(apiRef);\n    const cellMode = apiRef.current.getCellMode(id, field);\n    return apiRef.current.getCellParamsForRow(id, field, row, {\n      colDef: props.listView && props.listViewColumn?.field === field ? gridListColumnSelector(apiRef) : apiRef.current.getColumn(field),\n      rowNode,\n      hasFocus: cellFocus !== null && cellFocus.field === field && cellFocus.id === id,\n      tabIndex: cellTabIndex && cellTabIndex.field === field && cellTabIndex.id === id ? 0 : -1,\n      cellMode\n    });\n  }, [apiRef, props.listView, props.listViewColumn?.field]);\n  const getColumnHeaderElement = React.useCallback(field => {\n    if (!apiRef.current.rootElementRef.current) {\n      return null;\n    }\n    return getGridColumnHeaderElement(apiRef.current.rootElementRef.current, field);\n  }, [apiRef]);\n  const getRowElement = React.useCallback(id => {\n    if (!apiRef.current.rootElementRef.current) {\n      return null;\n    }\n    return getGridRowElement(apiRef.current.rootElementRef.current, id);\n  }, [apiRef]);\n  const getCellElement = React.useCallback((id, field) => {\n    if (!apiRef.current.rootElementRef.current) {\n      return null;\n    }\n    return getGridCellElement(apiRef.current.rootElementRef.current, {\n      id,\n      field\n    });\n  }, [apiRef]);\n  const overridableParamsMethods = configuration.hooks.useGridParamsOverridableMethods(apiRef);\n  const paramsApi = {\n    getCellValue: overridableParamsMethods.getCellValue,\n    getCellParams,\n    getCellElement,\n    getRowValue: overridableParamsMethods.getRowValue,\n    getRowFormattedValue: overridableParamsMethods.getRowFormattedValue,\n    getRowParams,\n    getRowElement,\n    getColumnHeaderParams,\n    getColumnHeaderElement\n  };\n  const paramsPrivateApi = {\n    getCellParamsForRow\n  };\n  useGridApiMethod(apiRef, paramsApi, 'public');\n  useGridApiMethod(apiRef, paramsPrivateApi, 'private');\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}