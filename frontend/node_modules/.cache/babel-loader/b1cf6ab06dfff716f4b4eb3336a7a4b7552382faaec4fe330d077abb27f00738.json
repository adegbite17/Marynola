{"ast":null,"code":"import { useGridSelector } from \"../../utils/index.js\";\nimport { gridExpandedRowCountSelector } from \"../filter/index.js\";\nimport { gridRowCountSelector, gridRowsLoadingSelector } from \"../rows/index.js\";\nimport { gridPinnedRowsCountSelector } from \"../rows/gridRowsSelector.js\";\nimport { gridVisibleColumnDefinitionsSelector } from \"../columns/index.js\";\nimport { gridPivotActiveSelector } from \"../pivoting/index.js\";\n/**\n * Uses the grid state to determine which overlay to display.\n * Returns the active overlay type and the active loading overlay variant.\n */\nexport const useGridOverlays = (apiRef, props) => {\n  const totalRowCount = useGridSelector(apiRef, gridRowCountSelector);\n  const visibleRowCount = useGridSelector(apiRef, gridExpandedRowCountSelector);\n  const pinnedRowsCount = useGridSelector(apiRef, gridPinnedRowsCountSelector);\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const noRows = totalRowCount === 0 && pinnedRowsCount === 0;\n  const loading = useGridSelector(apiRef, gridRowsLoadingSelector);\n  const pivotActive = useGridSelector(apiRef, gridPivotActiveSelector);\n  const showNoRowsOverlay = !loading && noRows;\n  const showNoResultsOverlay = !loading && totalRowCount > 0 && visibleRowCount === 0;\n  const showNoColumnsOverlay = !loading && visibleColumns.length === 0;\n  const showEmptyPivotOverlay = showNoRowsOverlay && pivotActive;\n  let overlayType = null;\n  let loadingOverlayVariant = null;\n  if (showNoRowsOverlay) {\n    overlayType = 'noRowsOverlay';\n  }\n  if (showNoColumnsOverlay) {\n    overlayType = 'noColumnsOverlay';\n  }\n  if (showEmptyPivotOverlay) {\n    overlayType = 'emptyPivotOverlay';\n  }\n  if (showNoResultsOverlay) {\n    overlayType = 'noResultsOverlay';\n  }\n  if (loading) {\n    overlayType = 'loadingOverlay';\n    loadingOverlayVariant = props.slotProps?.loadingOverlay?.[noRows ? 'noRowsVariant' : 'variant'] ?? (noRows ? 'skeleton' : 'linear-progress');\n  }\n  return {\n    overlayType: overlayType,\n    loadingOverlayVariant\n  };\n};","map":{"version":3,"names":["useGridSelector","gridExpandedRowCountSelector","gridRowCountSelector","gridRowsLoadingSelector","gridPinnedRowsCountSelector","gridVisibleColumnDefinitionsSelector","gridPivotActiveSelector","useGridOverlays","apiRef","props","totalRowCount","visibleRowCount","pinnedRowsCount","visibleColumns","noRows","loading","pivotActive","showNoRowsOverlay","showNoResultsOverlay","showNoColumnsOverlay","length","showEmptyPivotOverlay","overlayType","loadingOverlayVariant","slotProps","loadingOverlay"],"sources":["C:/Users/USER/PycharmProjects/Company/frontend/node_modules/@mui/x-data-grid/esm/hooks/features/overlays/useGridOverlays.js"],"sourcesContent":["import { useGridSelector } from \"../../utils/index.js\";\nimport { gridExpandedRowCountSelector } from \"../filter/index.js\";\nimport { gridRowCountSelector, gridRowsLoadingSelector } from \"../rows/index.js\";\nimport { gridPinnedRowsCountSelector } from \"../rows/gridRowsSelector.js\";\nimport { gridVisibleColumnDefinitionsSelector } from \"../columns/index.js\";\nimport { gridPivotActiveSelector } from \"../pivoting/index.js\";\n/**\n * Uses the grid state to determine which overlay to display.\n * Returns the active overlay type and the active loading overlay variant.\n */\nexport const useGridOverlays = (apiRef, props) => {\n  const totalRowCount = useGridSelector(apiRef, gridRowCountSelector);\n  const visibleRowCount = useGridSelector(apiRef, gridExpandedRowCountSelector);\n  const pinnedRowsCount = useGridSelector(apiRef, gridPinnedRowsCountSelector);\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const noRows = totalRowCount === 0 && pinnedRowsCount === 0;\n  const loading = useGridSelector(apiRef, gridRowsLoadingSelector);\n  const pivotActive = useGridSelector(apiRef, gridPivotActiveSelector);\n  const showNoRowsOverlay = !loading && noRows;\n  const showNoResultsOverlay = !loading && totalRowCount > 0 && visibleRowCount === 0;\n  const showNoColumnsOverlay = !loading && visibleColumns.length === 0;\n  const showEmptyPivotOverlay = showNoRowsOverlay && pivotActive;\n  let overlayType = null;\n  let loadingOverlayVariant = null;\n  if (showNoRowsOverlay) {\n    overlayType = 'noRowsOverlay';\n  }\n  if (showNoColumnsOverlay) {\n    overlayType = 'noColumnsOverlay';\n  }\n  if (showEmptyPivotOverlay) {\n    overlayType = 'emptyPivotOverlay';\n  }\n  if (showNoResultsOverlay) {\n    overlayType = 'noResultsOverlay';\n  }\n  if (loading) {\n    overlayType = 'loadingOverlay';\n    loadingOverlayVariant = props.slotProps?.loadingOverlay?.[noRows ? 'noRowsVariant' : 'variant'] ?? (noRows ? 'skeleton' : 'linear-progress');\n  }\n  return {\n    overlayType: overlayType,\n    loadingOverlayVariant\n  };\n};"],"mappings":"AAAA,SAASA,eAAe,QAAQ,sBAAsB;AACtD,SAASC,4BAA4B,QAAQ,oBAAoB;AACjE,SAASC,oBAAoB,EAAEC,uBAAuB,QAAQ,kBAAkB;AAChF,SAASC,2BAA2B,QAAQ,6BAA6B;AACzE,SAASC,oCAAoC,QAAQ,qBAAqB;AAC1E,SAASC,uBAAuB,QAAQ,sBAAsB;AAC9D;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAGA,CAACC,MAAM,EAAEC,KAAK,KAAK;EAChD,MAAMC,aAAa,GAAGV,eAAe,CAACQ,MAAM,EAAEN,oBAAoB,CAAC;EACnE,MAAMS,eAAe,GAAGX,eAAe,CAACQ,MAAM,EAAEP,4BAA4B,CAAC;EAC7E,MAAMW,eAAe,GAAGZ,eAAe,CAACQ,MAAM,EAAEJ,2BAA2B,CAAC;EAC5E,MAAMS,cAAc,GAAGb,eAAe,CAACQ,MAAM,EAAEH,oCAAoC,CAAC;EACpF,MAAMS,MAAM,GAAGJ,aAAa,KAAK,CAAC,IAAIE,eAAe,KAAK,CAAC;EAC3D,MAAMG,OAAO,GAAGf,eAAe,CAACQ,MAAM,EAAEL,uBAAuB,CAAC;EAChE,MAAMa,WAAW,GAAGhB,eAAe,CAACQ,MAAM,EAAEF,uBAAuB,CAAC;EACpE,MAAMW,iBAAiB,GAAG,CAACF,OAAO,IAAID,MAAM;EAC5C,MAAMI,oBAAoB,GAAG,CAACH,OAAO,IAAIL,aAAa,GAAG,CAAC,IAAIC,eAAe,KAAK,CAAC;EACnF,MAAMQ,oBAAoB,GAAG,CAACJ,OAAO,IAAIF,cAAc,CAACO,MAAM,KAAK,CAAC;EACpE,MAAMC,qBAAqB,GAAGJ,iBAAiB,IAAID,WAAW;EAC9D,IAAIM,WAAW,GAAG,IAAI;EACtB,IAAIC,qBAAqB,GAAG,IAAI;EAChC,IAAIN,iBAAiB,EAAE;IACrBK,WAAW,GAAG,eAAe;EAC/B;EACA,IAAIH,oBAAoB,EAAE;IACxBG,WAAW,GAAG,kBAAkB;EAClC;EACA,IAAID,qBAAqB,EAAE;IACzBC,WAAW,GAAG,mBAAmB;EACnC;EACA,IAAIJ,oBAAoB,EAAE;IACxBI,WAAW,GAAG,kBAAkB;EAClC;EACA,IAAIP,OAAO,EAAE;IACXO,WAAW,GAAG,gBAAgB;IAC9BC,qBAAqB,GAAGd,KAAK,CAACe,SAAS,EAAEC,cAAc,GAAGX,MAAM,GAAG,eAAe,GAAG,SAAS,CAAC,KAAKA,MAAM,GAAG,UAAU,GAAG,iBAAiB,CAAC;EAC9I;EACA,OAAO;IACLQ,WAAW,EAAEA,WAAW;IACxBC;EACF,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}