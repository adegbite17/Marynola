{"ast":null,"code":"const API_BASE_URL = 'http://localhost:5000';\nclass ApiService {\n  static async request(endpoint, options = {}) {\n    const url = `${API_BASE_URL}${endpoint}`;\n    const config = {\n      ...options\n    };\n\n    // Add auth token if available\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers = {\n        ...config.headers,\n        'Authorization': `Bearer ${token}`\n      };\n    }\n\n    // Only add Content-Type for non-FormData requests\n    if (!(options.body instanceof FormData)) {\n      config.headers = {\n        'Content-Type': 'application/json',\n        ...config.headers\n      };\n    }\n    try {\n      const response = await fetch(url, config);\n      if (!response.ok) {\n        if (response.status === 401) {\n          // Token expired or invalid\n          localStorage.removeItem('token');\n          localStorage.removeItem('user');\n          window.location.href = '/login';\n          throw new Error('Session expired. Please login again.');\n        }\n        let errorMessage;\n        try {\n          const errorData = await response.json();\n          errorMessage = errorData.message || errorData.error || `HTTP ${response.status}`;\n        } catch {\n          errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n        }\n        throw new Error(errorMessage);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n\n  // Authentication endpoints\n  static async register(userData) {\n    return this.request('/api/register', {\n      method: 'POST',\n      body: JSON.stringify(userData)\n    });\n  }\n  static async login(credentials) {\n    return this.request('/api/login', {\n      method: 'POST',\n      body: JSON.stringify(credentials)\n    });\n  }\n  static async logout() {\n    try {\n      await this.request('/api/logout', {\n        method: 'POST'\n      });\n    } finally {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n    }\n  }\n  static async forgotPassword(email) {\n    return this.request('/api/forgot-password', {\n      method: 'POST',\n      body: JSON.stringify({\n        email\n      })\n    });\n  }\n  static async resetPasswordWithCode(email, code, newPassword) {\n    return this.request('/api/reset-password', {\n      method: 'POST',\n      body: JSON.stringify({\n        email: email,\n        code: code,\n        new_password: newPassword\n      })\n    });\n  }\n\n  // Staff management endpoints\n  static async getStaffList() {\n    return this.request('/api/staff');\n  }\n  static async getStaff(id) {\n    return this.request(`/api/staff/${id}`);\n  }\n  static async addStaff(staffData) {\n    return this.request('/api/staff', {\n      method: 'POST',\n      body: JSON.stringify(staffData)\n    });\n  }\n  static async addStaffWithFile(formData) {\n    return this.request('/api/staff', {\n      method: 'POST',\n      body: formData // FormData for file upload\n    });\n  }\n  static async updateStaff(id, staffData) {\n    return this.request(`/api/staff/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(staffData)\n    });\n  }\n  static async deleteStaff(id) {\n    return this.request(`/api/staff/${id}`, {\n      method: 'DELETE'\n    });\n  }\n\n  // Dashboard/User profile endpoints\n  static async getDashboard() {\n    return this.request('/api/dashboard');\n  }\n  static async getUserProfile() {\n    return this.request('/api/profile');\n  }\n  static async updateProfile(profileData) {\n    return this.request('/api/profile', {\n      method: 'PUT',\n      body: JSON.stringify(profileData)\n    });\n  }\n}\nexport default ApiService;","map":{"version":3,"names":["API_BASE_URL","ApiService","request","endpoint","options","url","config","token","localStorage","getItem","headers","body","FormData","response","fetch","ok","status","removeItem","window","location","href","Error","errorMessage","errorData","json","message","error","statusText","console","register","userData","method","JSON","stringify","login","credentials","logout","forgotPassword","email","resetPasswordWithCode","code","newPassword","new_password","getStaffList","getStaff","id","addStaff","staffData","addStaffWithFile","formData","updateStaff","deleteStaff","getDashboard","getUserProfile","updateProfile","profileData"],"sources":["C:/Users/USER/PycharmProjects/Company/frontend/src/services/api.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:5000';\r\n\r\nclass ApiService {\r\n  static async request(endpoint, options = {}) {\r\n    const url = `${API_BASE_URL}${endpoint}`;\r\n    const config = {\r\n      ...options,\r\n    };\r\n\r\n    // Add auth token if available\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers = {\r\n        ...config.headers,\r\n        'Authorization': `Bearer ${token}`,\r\n      };\r\n    }\r\n\r\n    // Only add Content-Type for non-FormData requests\r\n    if (!(options.body instanceof FormData)) {\r\n      config.headers = {\r\n        'Content-Type': 'application/json',\r\n        ...config.headers,\r\n      };\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(url, config);\r\n\r\n      if (!response.ok) {\r\n        if (response.status === 401) {\r\n          // Token expired or invalid\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('user');\r\n          window.location.href = '/login';\r\n          throw new Error('Session expired. Please login again.');\r\n        }\r\n\r\n        let errorMessage;\r\n        try {\r\n          const errorData = await response.json();\r\n          errorMessage = errorData.message || errorData.error || `HTTP ${response.status}`;\r\n        } catch {\r\n          errorMessage = `HTTP ${response.status}: ${response.statusText}`;\r\n        }\r\n        throw new Error(errorMessage);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('API Error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Authentication endpoints\r\n  static async register(userData) {\r\n    return this.request('/api/register', {\r\n      method: 'POST',\r\n      body: JSON.stringify(userData),\r\n    });\r\n  }\r\n\r\n  static async login(credentials) {\r\n    return this.request('/api/login', {\r\n      method: 'POST',\r\n      body: JSON.stringify(credentials),\r\n    });\r\n  }\r\n\r\n  static async logout() {\r\n    try {\r\n      await this.request('/api/logout', {\r\n        method: 'POST',\r\n      });\r\n    } finally {\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n    }\r\n  }\r\n\r\n  static async forgotPassword(email) {\r\n    return this.request('/api/forgot-password', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ email }),\r\n    });\r\n  }\r\n\r\n  static async resetPasswordWithCode(email, code, newPassword) {\r\n    return this.request('/api/reset-password', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        email: email,\r\n        code: code,\r\n        new_password: newPassword\r\n      }),\r\n    });\r\n  }\r\n\r\n  // Staff management endpoints\r\n  static async getStaffList() {\r\n    return this.request('/api/staff');\r\n  }\r\n\r\n  static async getStaff(id) {\r\n    return this.request(`/api/staff/${id}`);\r\n  }\r\n\r\n  static async addStaff(staffData) {\r\n    return this.request('/api/staff', {\r\n      method: 'POST',\r\n      body: JSON.stringify(staffData),\r\n    });\r\n  }\r\n\r\n  static async addStaffWithFile(formData) {\r\n    return this.request('/api/staff', {\r\n      method: 'POST',\r\n      body: formData, // FormData for file upload\r\n    });\r\n  }\r\n\r\n  static async updateStaff(id, staffData) {\r\n    return this.request(`/api/staff/${id}`, {\r\n      method: 'PUT',\r\n      body: JSON.stringify(staffData),\r\n    });\r\n  }\r\n\r\n  static async deleteStaff(id) {\r\n    return this.request(`/api/staff/${id}`, {\r\n      method: 'DELETE',\r\n    });\r\n  }\r\n\r\n  // Dashboard/User profile endpoints\r\n  static async getDashboard() {\r\n    return this.request('/api/dashboard');\r\n  }\r\n\r\n  static async getUserProfile() {\r\n    return this.request('/api/profile');\r\n  }\r\n\r\n  static async updateProfile(profileData) {\r\n    return this.request('/api/profile', {\r\n      method: 'PUT',\r\n      body: JSON.stringify(profileData),\r\n    });\r\n  }\r\n}\r\n\r\nexport default ApiService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}