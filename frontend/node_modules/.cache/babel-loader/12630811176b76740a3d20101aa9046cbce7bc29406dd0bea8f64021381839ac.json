{"ast":null,"code":"const API_BASE_URL = 'http://localhost:5000'; // Keep this as 5000 since that's what you have\n\nclass ApiService {\n  static async request(endpoint, options = {}) {\n    const url = `${API_BASE_URL}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    };\n\n    // Add auth token if available\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    try {\n      const response = await fetch(url, config);\n      if (!response.ok) {\n        let errorMessage;\n        try {\n          const errorData = await response.json();\n          errorMessage = errorData.message || errorData.error || `HTTP ${response.status}`;\n        } catch {\n          errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n        }\n        throw new Error(errorMessage);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n\n  // Authentication endpoints\n  static async register(userData) {\n    return this.request('/api/register', {\n      method: 'POST',\n      body: JSON.stringify(userData)\n    });\n  }\n  static async login(credentials) {\n    return this.request('/api/login', {\n      method: 'POST',\n      body: JSON.stringify(credentials)\n    });\n  }\n  static async logout() {\n    return this.request('/api/logout', {\n      method: 'POST'\n    });\n  }\n  static async forgotPassword(email) {\n    return this.request('/api/forgot-password', {\n      method: 'POST',\n      body: JSON.stringify({\n        email\n      })\n    });\n  }\n  static async resetPassword(token, password) {\n    return this.request('/api/reset-password', {\n      method: 'POST',\n      body: JSON.stringify({\n        token,\n        password\n      })\n    });\n  }\n\n  // Staff management endpoints\n  static async getStaffList() {\n    return this.request('/api/staff');\n  }\n  static async getStaff(id) {\n    return this.request(`/api/staff/${id}`);\n  }\n  static async addStaff(staffData) {\n    return this.request('/api/staff', {\n      method: 'POST',\n      body: JSON.stringify(staffData)\n    });\n  }\n  static async updateStaff(id, staffData) {\n    return this.request(`/api/staff/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(staffData)\n    });\n  }\n  static async deleteStaff(id) {\n    return this.request(`/api/staff/${id}`, {\n      method: 'DELETE'\n    });\n  }\n\n  // Dashboard/User profile endpoints\n  static async getDashboard() {\n    return this.request('/api/dashboard');\n  }\n  static async getUserProfile() {\n    return this.request('/api/profile');\n  }\n  static async updateProfile(profileData) {\n    return this.request('/api/profile', {\n      method: 'PUT',\n      body: JSON.stringify(profileData)\n    });\n  }\n}\nexport default ApiService;","map":{"version":3,"names":["API_BASE_URL","ApiService","request","endpoint","options","url","config","headers","token","localStorage","getItem","Authorization","response","fetch","ok","errorMessage","errorData","json","message","error","status","statusText","Error","console","register","userData","method","body","JSON","stringify","login","credentials","logout","forgotPassword","email","resetPassword","password","getStaffList","getStaff","id","addStaff","staffData","updateStaff","deleteStaff","getDashboard","getUserProfile","updateProfile","profileData"],"sources":["C:/Users/USER/PycharmProjects/Company/frontend/src/services/api.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:5000'; // Keep this as 5000 since that's what you have\r\n\r\nclass ApiService {\r\n  static async request(endpoint, options = {}) {\r\n    const url = `${API_BASE_URL}${endpoint}`;\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...options.headers,\r\n      },\r\n      ...options,\r\n    };\r\n\r\n    // Add auth token if available\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(url, config);\r\n\r\n      if (!response.ok) {\r\n        let errorMessage;\r\n        try {\r\n          const errorData = await response.json();\r\n          errorMessage = errorData.message || errorData.error || `HTTP ${response.status}`;\r\n        } catch {\r\n          errorMessage = `HTTP ${response.status}: ${response.statusText}`;\r\n        }\r\n        throw new Error(errorMessage);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('API Error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Authentication endpoints\r\n  static async register(userData) {\r\n    return this.request('/api/register', {\r\n      method: 'POST',\r\n      body: JSON.stringify(userData),\r\n    });\r\n  }\r\n\r\n  static async login(credentials) {\r\n    return this.request('/api/login', {\r\n      method: 'POST',\r\n      body: JSON.stringify(credentials),\r\n    });\r\n  }\r\n\r\n  static async logout() {\r\n    return this.request('/api/logout', {\r\n      method: 'POST',\r\n    });\r\n  }\r\n\r\n  static async forgotPassword(email) {\r\n    return this.request('/api/forgot-password', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ email }),\r\n    });\r\n  }\r\n\r\n  static async resetPassword(token, password) {\r\n    return this.request('/api/reset-password', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ token, password }),\r\n    });\r\n  }\r\n\r\n  // Staff management endpoints\r\n  static async getStaffList() {\r\n    return this.request('/api/staff');\r\n  }\r\n\r\n  static async getStaff(id) {\r\n    return this.request(`/api/staff/${id}`);\r\n  }\r\n\r\n  static async addStaff(staffData) {\r\n    return this.request('/api/staff', {\r\n      method: 'POST',\r\n      body: JSON.stringify(staffData),\r\n    });\r\n  }\r\n\r\n  static async updateStaff(id, staffData) {\r\n    return this.request(`/api/staff/${id}`, {\r\n      method: 'PUT',\r\n      body: JSON.stringify(staffData),\r\n    });\r\n  }\r\n\r\n  static async deleteStaff(id) {\r\n    return this.request(`/api/staff/${id}`, {\r\n      method: 'DELETE',\r\n    });\r\n  }\r\n\r\n  // Dashboard/User profile endpoints\r\n  static async getDashboard() {\r\n    return this.request('/api/dashboard');\r\n  }\r\n\r\n  static async getUserProfile() {\r\n    return this.request('/api/profile');\r\n  }\r\n\r\n  static async updateProfile(profileData) {\r\n    return this.request('/api/profile', {\r\n      method: 'PUT',\r\n      body: JSON.stringify(profileData),\r\n    });\r\n  }\r\n}\r\n\r\nexport default ApiService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}